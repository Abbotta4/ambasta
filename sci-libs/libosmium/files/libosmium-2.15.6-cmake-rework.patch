From 26bb797775085fc6be874ff421a978028467e36a Mon Sep 17 00:00:00 2001
From: Amit Prakash Ambasta <amit.prakash.ambasta@gmail.com>
Date: Mon, 2 Nov 2020 10:08:53 +0530
Subject: [PATCH] Move to a modular cmake

---
 CMakeLists.txt                                | 662 +++++++++++-------
 cmake/FindOsmium.cmake                        | 307 +++-----
 cmake/FindProtozero.cmake                     |  63 --
 cmake/Findgdal.cmake                          |  51 ++
 cmake/Findgeos.cmake                          |  40 ++
 cmake/Findproj.cmake                          |  51 ++
 cmake/Findsparsehash.cmake                    |  46 ++
 cmake/osmiumConfig.cmake.in                   |  20 +
 cmake/osmiumUtils.cmake                       |  13 +
 examples/CMakeLists.txt                       |   2 +-
 .../osmium/{version.hpp => version.hpp.in}    |   8 +-
 test/CMakeLists.txt                           | 119 ++--
 12 files changed, 766 insertions(+), 616 deletions(-)
 delete mode 100644 cmake/FindProtozero.cmake
 create mode 100644 cmake/Findgdal.cmake
 create mode 100644 cmake/Findgeos.cmake
 create mode 100644 cmake/Findproj.cmake
 create mode 100644 cmake/Findsparsehash.cmake
 create mode 100644 cmake/osmiumConfig.cmake.in
 create mode 100644 cmake/osmiumUtils.cmake
 rename include/osmium/{version.hpp => version.hpp.in} (87%)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c698acb0..0a38cc36 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,9 +6,10 @@
 #
 #-----------------------------------------------------------------------------
 
-cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
-list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
+cmake_minimum_REQUIRED(VERSION 2.8 FATAL_ERROR)
+cmake_policy(SET CMP0048 NEW)
 
+list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 
 #-----------------------------------------------------------------------------
 #
@@ -16,18 +17,24 @@ list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
 #
 #-----------------------------------------------------------------------------
 
-set(CMAKE_CXX_FLAGS_COVERAGE
-    "-g -O0 -fno-inline-functions -fno-inline --coverage ${extra_coverage_flags_}"
-    CACHE STRING "Flags used by the compiler during coverage builds.")
+set(
+  CMAKE_CXX_FLAGS_COVERAGE
+  "-g -O0 -fno-inline-functions -fno-inline --coverage ${extra_coverage_flags_}"
+  CACHE STRING "Flags used by the compiler during coverage builds."
+)
 
-set(CMAKE_EXE_LINKER_FLAGS_COVERAGE
-    "--coverage"
-    CACHE STRING "Flags used by the linker during coverage builds.")
+set(
+  CMAKE_EXE_LINKER_FLAGS_COVERAGE
+  "--coverage"
+  CACHE STRING "Flags used by the linker during coverage builds."
+)
 
-set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel;Dev;Coverage"
-    CACHE STRING
-    "List of available configuration types"
-    FORCE)
+set(
+  CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel;Dev;Coverage"
+  CACHE STRING
+  "List of available configuration types"
+  FORCE
+)
 
 
 #-----------------------------------------------------------------------------
@@ -36,16 +43,9 @@ set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel;Dev;Cover
 #
 #-----------------------------------------------------------------------------
 
-project(libosmium)
-
-set(LIBOSMIUM_VERSION_MAJOR 2)
-set(LIBOSMIUM_VERSION_MINOR 15)
-set(LIBOSMIUM_VERSION_PATCH 6)
-
-set(LIBOSMIUM_VERSION
-    "${LIBOSMIUM_VERSION_MAJOR}.${LIBOSMIUM_VERSION_MINOR}.${LIBOSMIUM_VERSION_PATCH}")
-
+project(osmium VERSION 2.15.6)
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+include(${PROJECT_NAME}Utils)
 
 
 #-----------------------------------------------------------------------------
@@ -57,28 +57,28 @@ set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 #-----------------------------------------------------------------------------
 
 if(CMAKE_BUILD_TYPE STREQUAL "Dev")
-    set(dev_build ON)
-    set(data_test_build ON)
+  set(dev_build ON)
+  set(data_test_build ON)
 else()
-    set(dev_build OFF)
-    set(data_test_build OFF)
+  set(dev_build OFF)
+  set(data_test_build OFF)
 endif()
 
 if(CMAKE_BUILD_TYPE STREQUAL "Coverage")
-    set(data_test_build ON)
+  set(data_test_build ON)
 endif()
 
-option(BUILD_EXAMPLES   "compile example programs" ON)
-option(BUILD_TESTING    "compile unit tests, please run them with ctest" ON)
+option(BUILD_EXAMPLES "compile example programs" ON)
+option(BUILD_TESTING "compile unit tests, please run them with ctest" ON)
 
-option(BUILD_HEADERS    "compile every header file on its own" ${dev_build})
+option(BUILD_HEADERS "compile every header file on its own" ${dev_build})
 option(BUILD_BENCHMARKS "compile benchmark programs" ${dev_build})
 
 option(BUILD_DATA_TESTS "compile data tests, please run them with ctest" ${data_test_build})
 
-option(INSTALL_GDALCPP   "also install gdalcpp headers" OFF)
+option(INSTALL_GDALCPP "also install gdalcpp headers" OFF)
 
-option(WITH_PROFILING    "add flags needed for profiling" OFF)
+option(WITH_PROFILING "add flags needed for profiling" OFF)
 
 
 #-----------------------------------------------------------------------------
@@ -90,15 +90,15 @@ option(WITH_PROFILING    "add flags needed for profiling" OFF)
 option(BUILD_WITH_CCACHE "build using ccache" OFF)
 
 if(BUILD_WITH_CCACHE)
-    find_program(CCACHE_PROGRAM ccache)
-    if(CCACHE_PROGRAM)
-        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "CCACHE_CPP2=1 ${CCACHE_PROGRAM}")
-
-        # workaround for some clang versions
-        if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-            add_definitions(-Qunused-arguments)
-        endif()
+  find_program(CCACHE_PROGRAM ccache)
+  if(CCACHE_PROGRAM)
+    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "CCACHE_CPP2=1 ${CCACHE_PROGRAM}")
+
+    # workaround for some clang versions
+    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+      add_definitions(-Qunused-arguments)
     endif()
+  endif()
 endif()
 
 
@@ -116,33 +116,37 @@ endif()
 #endif()
 
 if(CMAKE_BUILD_TYPE STREQUAL "Coverage")
-    if(BUILD_EXAMPLES OR BUILD_HEADERS OR BUILD_BENCHMARKS)
-        message(WARNING "Coverage builds don't work for anything but the tests")
-    endif()
-
-    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
-        string(REGEX REPLACE "^([0-9]+)\\.([0-9]+).*$" "llvm-cov-\\1.\\2"
-               gcov_ ${CMAKE_CXX_COMPILER_VERSION})
-    else()
-        set(gcov_ "gcov")
-    endif()
-
-    find_program(GCOV ${gcov_} DOC "Coverage tool")
-    find_program(GCOVR "gcovr" DOC "Coverage report tool")
-
-    set(coverage_report_dir "${CMAKE_BINARY_DIR}/coverage")
-    file(MAKE_DIRECTORY ${coverage_report_dir})
-    add_custom_target(coverage
-        ${GCOVR}
-        ${CMAKE_BINARY_DIR}
-        --root=${CMAKE_SOURCE_DIR}
-        --html --html-details
-        #--verbose
-        #--keep
-        '--filter=.*include/osmium.*'
-        --sort-percentage
-        --gcov-executable=${GCOV}
-        --output=${coverage_report_dir}/index.html)
+  if(BUILD_EXAMPLES OR BUILD_HEADERS OR BUILD_BENCHMARKS)
+    message(WARNING "Coverage builds don't work for anything but the tests")
+  endif()
+
+  if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+    string(
+      REGEX REPLACE "^([0-9]+)\\.([0-9]+).*$" "llvm-cov-\\1.\\2"
+      gcov_ ${CMAKE_CXX_COMPILER_VERSION}
+    )
+  else()
+    set(gcov_ "gcov")
+  endif()
+
+  find_program(GCOV ${gcov_} DOC "Coverage tool")
+  find_program(GCOVR "gcovr" DOC "Coverage report tool")
+
+  set(coverage_report_dir "${CMAKE_BINARY_DIR}/coverage")
+  file(MAKE_DIRECTORY ${coverage_report_dir})
+  add_custom_target(
+    coverage
+    ${GCOVR}
+    ${CMAKE_BINARY_DIR}
+    --root=${CMAKE_SOURCE_DIR}
+    --html --html-details
+    #--verbose
+    #--keep
+    '--filter=.*include/osmium.*'
+    --sort-percentage
+    --gcov-executable=${GCOV}
+    --output=${coverage_report_dir}/index.html
+  )
 endif()
 
 
@@ -152,32 +156,81 @@ endif()
 #
 #-----------------------------------------------------------------------------
 
-find_package(Boost 1.38)
-mark_as_advanced(CLEAR BOOST_ROOT)
-
-if(Boost_FOUND)
-    include_directories(SYSTEM ${Boost_INCLUDE_DIRS})
-else()
-    set(BOOST_ROOT "NOT FOUND: please choose" CACHE PATH "")
-    message(FATAL_ERROR "PLEASE, specify the directory where the Boost library is installed in BOOST_ROOT")
-endif()
-
-# set OSMIUM_INCLUDE_DIR so FindOsmium will not set anything different
-set(OSMIUM_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")
+find_package(Boost 1.38 REQUIRED COMPONENTS system)
+find_package(protozero 1.6.3 REQUIRED)
+find_package(EXPAT REQUIRED)
+find_package(BZip2 REQUIRED)
+find_package(ZLIB REQUIRED)
+find_package(Threads REQUIRED)
+find_package(geos REQUIRED)
+find_package(gdal REQUIRED)
+find_package(proj REQUIRED)
+find_package(sparsehash QUIET)
 
-include_directories(${OSMIUM_INCLUDE_DIR})
 
-find_package(Osmium COMPONENTS io gdal geos proj sparsehash)
+#-----------------------------------------------------------------------------
+#
+# Configure version headers
+#
+#-----------------------------------------------------------------------------
+configure_file(
+  ${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME}/version.hpp.in
+  ${PROJECT_BINARY_DIR}/include/${PROJECT_NAME}/version.hpp
+)
 
-# The find_package put the directory where it found the libosmium includes
-# into OSMIUM_INCLUDE_DIRS. We remove it again, because we want to make
-# sure to use our own include directory already set up above.
-list(FIND OSMIUM_INCLUDE_DIRS "${OSMIUM_INCLUDE_DIR}" _own_index)
-list(REMOVE_AT OSMIUM_INCLUDE_DIRS ${_own_index})
-set(_own_index)
+#-----------------------------------------------------------------------------
+#
+# Define the library
+#
+#-----------------------------------------------------------------------------
+add_library(${PROJECT_NAME} INTERFACE)
+target_include_directories(
+  ${PROJECT_NAME}
+  INTERFACE
+  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+  $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
+  $<INSTALL_INTERFACE:include>
+)
 
-include_directories(SYSTEM ${OSMIUM_INCLUDE_DIRS})
+target_compile_features(${PROJECT_NAME} INTERFACE cxx_std_14)
+
+target_link_libraries(
+  ${PROJECT_NAME}
+  INTERFACE
+  Boost::system
+  protozero::protozero
+  EXPAT::EXPAT
+  BZip2::BZip2
+  ZLIB::ZLIB
+  Threads::Threads
+  geos::geos
+  gdal::gdal
+  proj::proj
+)
 
+if(sparsehash_FOUND)
+  if(NOT CMAKE_VERSION VERSION_LESS 3.0)
+    include(CheckTypeSize)
+    set(CMAKE_REQUIRED_INCLUDES ${SPARSEHASH_INCLUDE_DIR})
+    set(CMAKE_EXTRA_INCLUDE_FILES "google/sparsetable")
+    check_type_size("google::sparsetable<int>::size_type" SPARSETABLE_SIZE_TYPE LANGUAGE CXX)
+    set(CMAKE_EXTRA_INCLUDE_FILES)
+    set(CMAKE_REQUIRED_INCLUDES)
+  else(NOT CMAKE_VERSION VERSION_LESS 3.0)
+    set(SPARSETABLE_SIZE_TYPE ${CMAKE_SIZEOF_VOID_P})
+  endif(NOT CMAKE_VERSION VERSION_LESS 3.0)
+
+  if(SPARSETABLE_SIZE_TYPE GREATER 7)
+    set(SPARSEHASH_FOUND 1)
+    target_compile_definitions(
+      ${PROJECT_NAME}
+      INTERFACE
+      -DOSMIUM_WITH_SPARSEHASH=${SPARSEHASH_FOUND}
+    )
+  else(SPARSETABLE_SIZE_TYPE GREATER 7)
+    message(WARNING "Osmium: Disabled Google SparseHash library on 32bit system (size_type=${SPARSETABLE_SIZE_TYPE}).")
+  endif(SPARSETABLE_SIZE_TYPE GREATER 7)
+endif()
 
 #-----------------------------------------------------------------------------
 #
@@ -185,18 +238,18 @@ include_directories(SYSTEM ${OSMIUM_INCLUDE_DIRS})
 #
 #-----------------------------------------------------------------------------
 if(NOT MSVC)
-    if(NOT USE_CPP_VERSION)
-        if(CYGWIN)
-            set(USE_CPP_VERSION gnu++11)
-        else()
-            set(USE_CPP_VERSION c++11)
-        endif()
+  if(NOT USE_CPP_VERSION)
+    if(CYGWIN)
+      set(USE_CPP_VERSION gnu++11)
+    else()
+      set(USE_CPP_VERSION c++11)
     endif()
-    message(STATUS "Use C++ version: ${USE_CPP_VERSION}")
-    # following only available from cmake 2.8.12:
-    #   add_compile_options(-std=${USE_CPP_VERSION})
-    # so using this instead:
-    add_definitions(-std=${USE_CPP_VERSION})
+  endif()
+  message(STATUS "Use C++ version: ${USE_CPP_VERSION}")
+  # following only available from cmake 2.8.12:
+  #   add_compile_options(-std=${USE_CPP_VERSION})
+  # so using this instead:
+  add_definitions(-std=${USE_CPP_VERSION})
 endif()
 
 
@@ -206,47 +259,55 @@ endif()
 #
 #-----------------------------------------------------------------------------
 if(MSVC)
-    set(DEV_COMPILE_OPTIONS "/Ox")
-    set(RWD_COMPILE_OPTIONS "/Ox /DNDEBUG")
-    # do not show warnings caused by missing .pdb files for libraries
-    set(USUAL_LINK_OPTIONS "/debug /ignore:4099")
+  set(DEV_COMPILE_OPTIONS "/Ox")
+  set(RWD_COMPILE_OPTIONS "/Ox /DNDEBUG")
+  # do not show warnings caused by missing .pdb files for libraries
+  set(USUAL_LINK_OPTIONS "/debug /ignore:4099")
 else()
-    set(DEV_COMPILE_OPTIONS "-O3 -g")
-    set(RWD_COMPILE_OPTIONS "-O3 -g -DNDEBUG")
-    set(USUAL_LINK_OPTIONS "")
+  set(DEV_COMPILE_OPTIONS "-O3 -g")
+  set(RWD_COMPILE_OPTIONS "-O3 -g -DNDEBUG")
+  set(USUAL_LINK_OPTIONS "")
 endif()
 
 if(WIN32)
-    add_definitions(-DWIN32 -D_WIN32 -DMSWIN32 -DBGDWIN32)
+  add_definitions(-DWIN32 -D_WIN32 -DMSWIN32 -DBGDWIN32)
 endif()
 
-set(CMAKE_CXX_FLAGS_DEV "${DEV_COMPILE_OPTIONS}"
-    CACHE STRING "Flags used by the compiler during developer builds."
-    FORCE)
+set(
+  CMAKE_CXX_FLAGS_DEV "${DEV_COMPILE_OPTIONS}"
+  CACHE STRING "Flags used by the compiler during developer builds."
+  FORCE
+)
 
-set(CMAKE_EXE_LINKER_FLAGS_DEV "${USUAL_LINK_OPTIONS}"
-    CACHE STRING "Flags used by the linker during developer builds."
-    FORCE)
+set(
+  CMAKE_EXE_LINKER_FLAGS_DEV "${USUAL_LINK_OPTIONS}"
+  CACHE STRING "Flags used by the linker during developer builds."
+  FORCE
+)
 mark_as_advanced(
-    CMAKE_CXX_FLAGS_DEV
-    CMAKE_EXE_LINKER_FLAGS_DEV
+  CMAKE_CXX_FLAGS_DEV
+  CMAKE_EXE_LINKER_FLAGS_DEV
 )
 
-set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${RWD_COMPILE_OPTIONS}"
-    CACHE STRING "Flags used by the compiler during RELWITHDEBINFO builds."
-    FORCE)
+set(
+  CMAKE_CXX_FLAGS_RELWITHDEBINFO "${RWD_COMPILE_OPTIONS}"
+  CACHE STRING "Flags used by the compiler during RELWITHDEBINFO builds."
+  FORCE
+)
 
-set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${USUAL_LINK_OPTIONS}"
-    CACHE STRING "Flags used by the linker during RELWITHDEBINFO builds."
-    FORCE)
+set(
+  CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${USUAL_LINK_OPTIONS}"
+  CACHE STRING "Flags used by the linker during RELWITHDEBINFO builds."
+  FORCE
+)
 
 mark_as_advanced(
-    CMAKE_CXX_FLAGS_RELWITHDEBINFO
-    CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
+  CMAKE_CXX_FLAGS_RELWITHDEBINFO
+  CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
 )
 
 if(WITH_PROFILING)
-    add_definitions(-fno-omit-frame-pointer)
+  add_definitions(-fno-omit-frame-pointer)
 endif()
 
 
@@ -258,24 +319,26 @@ endif()
 
 # In 'Dev' mode: compile with very strict warnings and turn them into errors.
 if(CMAKE_BUILD_TYPE STREQUAL "Dev")
-    if(NOT MSVC)
-        add_definitions(-Werror)
-    endif()
-    add_definitions(${OSMIUM_WARNING_OPTIONS})
-#    add_definitions(${OSMIUM_WARNING_OPTIONS} ${OSMIUM_DRACONIC_CLANG_OPTIONS} -Wno-documentation -Wno-format-nonliteral -Wno-deprecated -Wno-covered-switch-default -Wno-shadow)
+  if(NOT MSVC)
+    add_definitions(-Werror)
+  endif()
+  add_definitions(${OSMIUM_WARNING_OPTIONS})
+  #    add_definitions(${OSMIUM_WARNING_OPTIONS} ${OSMIUM_DRACONIC_CLANG_OPTIONS} -Wno-documentation -Wno-format-nonliteral -Wno-deprecated -Wno-covered-switch-default -Wno-shadow)
 endif()
 
 # Force RelWithDebInfo build type if none was given
 if(CMAKE_BUILD_TYPE)
-    set(build_type ${CMAKE_BUILD_TYPE})
+  set(build_type ${CMAKE_BUILD_TYPE})
 else()
-    set(build_type "RelWithDebInfo")
+  set(build_type "RelWithDebInfo")
 endif()
 
-set(CMAKE_BUILD_TYPE ${build_type}
-    CACHE STRING
-    "Choose the type of build, options are: ${CMAKE_CONFIGURATION_TYPES}."
-    FORCE)
+set(
+  CMAKE_BUILD_TYPE ${build_type}
+  CACHE STRING
+  "Choose the type of build, options are: ${CMAKE_CONFIGURATION_TYPES}."
+  FORCE
+)
 
 
 #-----------------------------------------------------------------------------
@@ -286,24 +349,26 @@ set(CMAKE_BUILD_TYPE ${build_type}
 enable_testing()
 
 if(BUILD_TESTING OR BUILD_DATA_TESTS)
-    find_program(MEMORYCHECK_COMMAND valgrind)
+  find_program(MEMORYCHECK_COMMAND valgrind)
 
-    set(MEMORYCHECK_COMMAND_OPTIONS
-        "--trace-children=yes --leak-check=full --show-reachable=yes --error-exitcode=1")
+  set(
+    MEMORYCHECK_COMMAND_OPTIONS
+    "--trace-children=yes --leak-check=full --show-reachable=yes --error-exitcode=1"
+  )
 
-    set(MEMORYCHECK_SUPPRESSIONS_FILE "${PROJECT_SOURCE_DIR}/test/valgrind.supp")
+  set(MEMORYCHECK_SUPPRESSIONS_FILE "${PROJECT_SOURCE_DIR}/test/valgrind.supp")
 endif()
 
 if(BUILD_TESTING)
-    add_subdirectory(test)
+  add_subdirectory(test)
 endif()
 
 if(BUILD_DATA_TESTS)
-    add_subdirectory(test/data-tests)
+  add_subdirectory(test/data-tests)
 endif()
 
 if(BUILD_EXAMPLES)
-    add_subdirectory(test/examples)
+  add_subdirectory(test/examples)
 endif()
 
 
@@ -316,49 +381,54 @@ message(STATUS "Looking for cppcheck")
 find_program(CPPCHECK cppcheck)
 
 if(CPPCHECK)
-    message(STATUS "Looking for cppcheck - found")
-    set(CPPCHECK_OPTIONS
-        --language=c++
-        --quiet
-        -j4
-        --inline-suppr
-        --enable=warning,style,performance,portability,information,missingInclude
-        --force
-        -Uassert -DPROTOZERO_STRICT_API -DPROTOZERO_USE_BUILTIN_BSWAP -UPROTOZERO_USE_VIEW)
-
-    # cpp doesn't find system includes for some reason, suppress that report
-    set(CPPCHECK_OPTIONS ${CPPCHECK_OPTIONS} --suppress=missingIncludeSystem)
-
-    file(GLOB_RECURSE ALL_INCLUDES   include/osmium/*.hpp)
-    file(GLOB         ALL_EXAMPLES   examples/*.cpp)
-    file(GLOB         ALL_BENCHMARKS benchmarks/*.cpp)
-    file(GLOB         ALL_UNIT_TESTS test/t/*/test_*.cpp)
-    file(GLOB         ALL_DATA_TESTS test/data-tests/*.cpp)
-
-    if(Osmium_DEBUG)
-        message(STATUS "Checking includes      : ${ALL_INCLUDES}")
-        message(STATUS "Checking example code  : ${ALL_EXAMPLES}")
-        message(STATUS "Checking benchmarks    : ${ALL_BENCHMARKS}")
-        message(STATUS "Checking unit test code: ${ALL_UNIT_TESTS}")
-        message(STATUS "Checking data test code: ${ALL_DATA_TESTS}")
-    endif()
-
-    set(CPPCHECK_FILES
-        ${ALL_INCLUDES}
-        ${ALL_EXAMPLES}
-        ${ALL_BENCHMARKS}
-        ${ALL_UNIT_TESTS}
-        ${ALL_DATA_TESTS})
-
-    add_custom_target(cppcheck
-        ${CPPCHECK}
-        --std=c++11 ${CPPCHECK_OPTIONS}
-        -I ${CMAKE_SOURCE_DIR}/include
-        ${CPPCHECK_FILES}
-    )
+  message(STATUS "Looking for cppcheck - found")
+  set(
+    CPPCHECK_OPTIONS
+    --language=c++
+    --quiet
+    -j4
+    --inline-suppr
+    --enable=warning,style,performance,portability,information,missingInclude
+    --force
+    -Uassert -DPROTOZERO_STRICT_API -DPROTOZERO_USE_BUILTIN_BSWAP -UPROTOZERO_USE_VIEW
+  )
+
+  # cpp doesn't find system includes for some reason, suppress that report
+  set(CPPCHECK_OPTIONS ${CPPCHECK_OPTIONS} --suppress=missingIncludeSystem)
+
+  file(GLOB_RECURSE ALL_INCLUDES include/osmium/*.hpp)
+  file(GLOB ALL_EXAMPLES examples/*.cpp)
+  file(GLOB ALL_BENCHMARKS benchmarks/*.cpp)
+  file(GLOB ALL_UNIT_TESTS test/t/*/test_*.cpp)
+  file(GLOB ALL_DATA_TESTS test/data-tests/*.cpp)
+
+  if(Osmium_DEBUG)
+    message(STATUS "Checking includes      : ${ALL_INCLUDES}")
+    message(STATUS "Checking example code  : ${ALL_EXAMPLES}")
+    message(STATUS "Checking benchmarks    : ${ALL_BENCHMARKS}")
+    message(STATUS "Checking unit test code: ${ALL_UNIT_TESTS}")
+    message(STATUS "Checking data test code: ${ALL_DATA_TESTS}")
+  endif()
+
+  set(
+    CPPCHECK_FILES
+    ${ALL_INCLUDES}
+    ${ALL_EXAMPLES}
+    ${ALL_BENCHMARKS}
+    ${ALL_UNIT_TESTS}
+    ${ALL_DATA_TESTS}
+  )
+
+  add_custom_target(
+    cppcheck
+    ${CPPCHECK}
+    --std=c++11 ${CPPCHECK_OPTIONS}
+    -I ${CMAKE_SOURCE_DIR}/include
+    ${CPPCHECK_FILES}
+  )
 else()
-    message(STATUS "Looking for cppcheck - not found")
-    message(STATUS "  Build target 'cppcheck' will not be available.")
+  message(STATUS "Looking for cppcheck - not found")
+  message(STATUS "  Build target 'cppcheck' will not be available.")
 endif()
 
 
@@ -369,11 +439,11 @@ endif()
 #-----------------------------------------------------------------------------
 
 if(BUILD_EXAMPLES)
-    add_subdirectory(examples)
+  add_subdirectory(examples)
 endif()
 
 if(BUILD_BENCHMARKS)
-    add_subdirectory(benchmarks)
+  add_subdirectory(benchmarks)
 endif()
 
 add_subdirectory(doc)
@@ -390,31 +460,33 @@ add_subdirectory(doc)
 #
 #-----------------------------------------------------------------------------
 if(BUILD_HEADERS)
-    file(GLOB_RECURSE
-         ALL_HPPS
-         RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/include"
-         include/osmium/*.hpp)
-
-    file(MAKE_DIRECTORY header_check)
-
-    foreach(hpp ${ALL_HPPS})
-        if(GDAL_FOUND OR NOT ((hpp STREQUAL "osmium/area/problem_reporter_ogr.hpp") OR (hpp STREQUAL "osmium/geom/ogr.hpp")))
-            string(REPLACE ".hpp" "" tmp ${hpp})
-            string(REPLACE "/" "__" libname ${tmp})
-
-            # Create a dummy .cpp file that includes the header file we want to
-            # check.
-            set(DUMMYCPP ${CMAKE_BINARY_DIR}/header_check/${libname}.cpp)
-            file(WRITE ${DUMMYCPP} "#define OSMIUM_UTIL_COMPATIBILITY_HPP\n#define OSMIUM_DEPRECATED\n#include <${hpp}> // IWYU pragma: keep\n")
-
-            # There is no way in CMake to just compile but not link a C++ file,
-            # so we pretend to build a library here.
-            add_library(${libname} STATIC ${DUMMYCPP} include/${hpp})
-
-            #### this is better but only supported from cmake 3.0:
-            ###add_library(${libname} OBJECT ${DUMMYCPP} include/${hpp})
-        endif()
-    endforeach()
+  file(
+    GLOB_RECURSE
+    ALL_HPPS
+    RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/include"
+    include/osmium/*.hpp
+  )
+
+  file(MAKE_DIRECTORY header_check)
+
+  foreach(hpp ${ALL_HPPS})
+    if(GDAL_FOUND OR NOT ((hpp STREQUAL "osmium/area/problem_reporter_ogr.hpp") OR (hpp STREQUAL "osmium/geom/ogr.hpp")))
+      string(REPLACE ".hpp" "" tmp ${hpp})
+      string(REPLACE "/" "__" libname ${tmp})
+
+      # Create a dummy .cpp file that includes the header file we want to
+      # check.
+      set(DUMMYCPP ${CMAKE_BINARY_DIR}/header_check/${libname}.cpp)
+      file(WRITE ${DUMMYCPP} "#define OSMIUM_UTIL_COMPATIBILITY_HPP\n#define OSMIUM_DEPRECATED\n#include <${hpp}> // IWYU pragma: keep\n")
+
+      # There is no way in CMake to just compile but not link a C++ file,
+      # so we pretend to build a library here.
+      add_library(${libname} STATIC ${DUMMYCPP} include/${hpp})
+
+      #### this is better but only supported from cmake 3.0:
+      ###add_library(${libname} OBJECT ${DUMMYCPP} include/${hpp})
+    endif()
+  endforeach()
 endif()
 
 
@@ -427,52 +499,55 @@ message(STATUS "Looking for clang-tidy")
 find_program(CLANG_TIDY NAMES clang-tidy clang-tidy-10 clang-tidy-9 clang-tidy-8 clang-tidy-7 clang-tidy-7.0 clang-tidy-6.0 clang-tidy-5.0)
 
 if(CLANG_TIDY)
-    message(STATUS "Looking for clang-tidy - found ${CLANG_TIDY}")
-
-    if(BUILD_EXAMPLES)
-        file(GLOB CT_ALL_EXAMPLES examples/*.cpp)
-    endif()
-
-    if(BUILD_TESTING)
-        file(GLOB CT_ALL_UNIT_TESTS test/t/*/test_*.cpp)
-    endif()
-
-    if(BUILD_HEADERS)
-        file(GLOB_RECURSE CT_ALL_INCLUDES ${CMAKE_BINARY_DIR}/header_check/osmium__*.cpp)
-    endif()
-
-    if(BUILD_BENCHMARKS)
-        file(GLOB CT_ALL_BENCHMARKS benchmarks/*.cpp)
-    endif()
-
-    if(BUILD_DATA_TESTS)
-        file(GLOB CT_ALL_DATA_TESTS test/data-tests/*.cpp)
-    endif()
-
-    if(Osmium_DEBUG)
-        message(STATUS "Checking example code  : ${CT_ALL_EXAMPLES}")
-        message(STATUS "Checking unit test code: ${CT_ALL_UNIT_TESTS}")
-        message(STATUS "Checking includes      : ${CT_ALL_INCLUDES}")
-        message(STATUS "Checking benchmarks    : ${CT_ALL_BENCHMARKS}")
-        message(STATUS "Checking data test code: ${CT_ALL_DATA_TESTS}")
-    endif()
-
-    set(CT_CHECK_FILES
-        ${CT_ALL_EXAMPLES}
-        ${CT_ALL_UNIT_TESTS}
-        ${CT_ALL_INCLUDES}
-        ${CT_ALL_BENCHMARKS}
-        ${CT_ALL_DATA_TESTS})
-
-    add_custom_target(clang-tidy
-        ${CLANG_TIDY}
-        -p ${CMAKE_BINARY_DIR}
-        "-extra-arg=-Wno-#pragma-messages"
-        ${CT_CHECK_FILES}
-    )
+  message(STATUS "Looking for clang-tidy - found ${CLANG_TIDY}")
+
+  if(BUILD_EXAMPLES)
+    file(GLOB CT_ALL_EXAMPLES examples/*.cpp)
+  endif()
+
+  if(BUILD_TESTING)
+    file(GLOB CT_ALL_UNIT_TESTS test/t/*/test_*.cpp)
+  endif()
+
+  if(BUILD_HEADERS)
+    file(GLOB_RECURSE CT_ALL_INCLUDES ${CMAKE_BINARY_DIR}/header_check/osmium__*.cpp)
+  endif()
+
+  if(BUILD_BENCHMARKS)
+    file(GLOB CT_ALL_BENCHMARKS benchmarks/*.cpp)
+  endif()
+
+  if(BUILD_DATA_TESTS)
+    file(GLOB CT_ALL_DATA_TESTS test/data-tests/*.cpp)
+  endif()
+
+  if(Osmium_DEBUG)
+    message(STATUS "Checking example code  : ${CT_ALL_EXAMPLES}")
+    message(STATUS "Checking unit test code: ${CT_ALL_UNIT_TESTS}")
+    message(STATUS "Checking includes      : ${CT_ALL_INCLUDES}")
+    message(STATUS "Checking benchmarks    : ${CT_ALL_BENCHMARKS}")
+    message(STATUS "Checking data test code: ${CT_ALL_DATA_TESTS}")
+  endif()
+
+  set(
+    CT_CHECK_FILES
+    ${CT_ALL_EXAMPLES}
+    ${CT_ALL_UNIT_TESTS}
+    ${CT_ALL_INCLUDES}
+    ${CT_ALL_BENCHMARKS}
+    ${CT_ALL_DATA_TESTS}
+  )
+
+  add_custom_target(
+    clang-tidy
+    ${CLANG_TIDY}
+    -p ${CMAKE_BINARY_DIR}
+    "-extra-arg=-Wno-#pragma-messages"
+    ${CT_CHECK_FILES}
+  )
 else()
-    message(STATUS "Looking for clang-tidy - not found")
-    message(STATUS "  Build target 'clang-tidy' will not be available.")
+  message(STATUS "Looking for clang-tidy - not found")
+  message(STATUS "  Build target 'clang-tidy' will not be available.")
 endif()
 
 #-----------------------------------------------------------------------------
@@ -483,11 +558,66 @@ endif()
 #  are installed from somewhere else.
 #
 #-----------------------------------------------------------------------------
-install(DIRECTORY include/osmium DESTINATION include)
+include(GNUInstallDirs)
+include(CMakePackageConfigHelpers)
 
-if(INSTALL_GDALCPP)
-    install(FILES include/gdalcpp.hpp DESTINATION include)
-endif()
+write_basic_package_version_file(
+  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY SameMajorVersion
+)
+
+configure_package_config_file(
+  cmake/${PROJECT_NAME}Config.cmake.in
+  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
+  INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake
+)
+
+install(
+  TARGETS ${PROJECT_NAME}
+  EXPORT ${PROJECT_NAME}Targets
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+install(
+  EXPORT ${PROJECT_NAME}Targets
+  FILE ${PROJECT_NAME}Targets.cmake
+  NAMESPACE ${PROJECT_NAME}::
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
+)
+
+install(
+  FILES
+  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
+  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
+)
+
+install(
+  DIRECTORY
+  ${PROJECT_SOURCE_DIR}/include/${PROJECT_NAME}
+  ${PROJECT_BINARY_DIR}/include/${PROJECT_NAME}
+  DESTINATION include
+  PATTERN "version.hpp.in" EXCLUDE
+)
+
+install(
+  DIRECTORY
+  DESTINATION include
+)
+
+export(
+  EXPORT ${PROJECT_NAME}Targets FILE
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake
+  NAMESPACE ${PROJECT_NAME}::
+)
+# if(INSTALL_GDALCPP)
+#   install(FILES include/gdalcpp.hpp DESTINATION include)
+# endif()
 
 
 #-----------------------------------------------------------------------------
@@ -501,9 +631,9 @@ set(CPACK_PACKAGE_VERSION_MINOR ${LIBOSMIUM_VERSION_MINOR})
 set(CPACK_PACKAGE_VERSION_PATCH ${LIBOSMIUM_VERSION_PATCH})
 
 if(WIN32)
-    set(CPACK_GENERATOR ZIP)
+  set(CPACK_GENERATOR ZIP)
 else()
-    set(CPACK_GENERATOR TGZ)
+  set(CPACK_GENERATOR TGZ)
 endif()
 
 include(CPack)
@@ -515,11 +645,11 @@ include(CPack)
 #
 #-----------------------------------------------------------------------------
 if(BUILD_DATA_TESTS AND OSM_TESTDATA STREQUAL "OSM_TESTDATA-NOTFOUND")
-    message("\n========================== WARNING ==========================")
-    message("osm-testdata directory not found, data tests were disabled!\n")
-    message("Call 'git submodule update --init' to install test data")
-    message("or set the OSM_TESTDATA cmake variable to its path.")
-    message("=============================================================\n")
+  message("\n========================== WARNING ==========================")
+  message("osm-testdata directory not found, data tests were disabled!\n")
+  message("Call 'git submodule update --init' to install test data")
+  message("or set the OSM_TESTDATA cmake variable to its path.")
+  message("=============================================================\n")
 endif()
 
 #-----------------------------------------------------------------------------
diff --git a/cmake/FindOsmium.cmake b/cmake/FindOsmium.cmake
index 8c659f26..cfaed059 100644
--- a/cmake/FindOsmium.cmake
+++ b/cmake/FindOsmium.cmake
@@ -55,34 +55,6 @@
 #----------------------------------------------------------------------
 
 # This is the list of directories where we look for osmium includes.
-set(_osmium_include_path
-        ../libosmium
-        ~/Library/Frameworks
-        /Library/Frameworks
-        /opt/local # DarwinPorts
-        /opt
-)
-
-# Look for the header file.
-find_path(OSMIUM_INCLUDE_DIR osmium/version.hpp
-    PATH_SUFFIXES include
-    PATHS ${_osmium_include_path}
-)
-
-# Check libosmium version number
-if(Osmium_FIND_VERSION)
-    if(NOT EXISTS "${OSMIUM_INCLUDE_DIR}/osmium/version.hpp")
-        message(FATAL_ERROR "Missing ${OSMIUM_INCLUDE_DIR}/osmium/version.hpp. Either your libosmium version is too old, or libosmium wasn't found in the place you said.")
-    endif()
-    file(STRINGS "${OSMIUM_INCLUDE_DIR}/osmium/version.hpp" _libosmium_version_define REGEX "#define LIBOSMIUM_VERSION_STRING")
-    if("${_libosmium_version_define}" MATCHES "#define LIBOSMIUM_VERSION_STRING \"([0-9.]+)\"")
-        set(_libosmium_version "${CMAKE_MATCH_1}")
-    else()
-        set(_libosmium_version "unknown")
-    endif()
-endif()
-
-set(OSMIUM_INCLUDE_DIRS "${OSMIUM_INCLUDE_DIR}")
 
 #----------------------------------------------------------------------
 #
@@ -90,212 +62,98 @@ set(OSMIUM_INCLUDE_DIRS "${OSMIUM_INCLUDE_DIR}")
 #
 #----------------------------------------------------------------------
 if(Osmium_FIND_COMPONENTS)
-    foreach(_component ${Osmium_FIND_COMPONENTS})
-        string(TOUPPER ${_component} _component_uppercase)
-        set(Osmium_USE_${_component_uppercase} TRUE)
-    endforeach()
+  foreach(_component ${Osmium_FIND_COMPONENTS})
+    string(TOUPPER ${_component} _component_uppercase)
+    set(Osmium_USE_${_component_uppercase} TRUE)
+  endforeach()
 endif()
 
 #----------------------------------------------------------------------
 # Component 'io' is an alias for 'pbf' and 'xml'
 if(Osmium_USE_IO)
-    set(Osmium_USE_PBF TRUE)
-    set(Osmium_USE_XML TRUE)
+  set(Osmium_USE_PBF TRUE)
+  set(Osmium_USE_XML TRUE)
 endif()
 
 #----------------------------------------------------------------------
 # Component 'ogr' is an alias for 'gdal'
 if(Osmium_USE_OGR)
-    set(Osmium_USE_GDAL TRUE)
+  set(Osmium_USE_GDAL TRUE)
 endif()
 
 #----------------------------------------------------------------------
 # Component 'pbf'
 if(Osmium_USE_PBF)
-    find_package(ZLIB)
-    find_package(Threads)
-    find_package(Protozero 1.6.3)
+  find_package(ZLIB REQUIRED)
+  find_package(Threads REQUIRED)
+  find_package(protozero 1.6.3 REQUIRED)
 
-    list(APPEND OSMIUM_EXTRA_FIND_VARS ZLIB_FOUND Threads_FOUND PROTOZERO_INCLUDE_DIR)
-    if(ZLIB_FOUND AND Threads_FOUND AND PROTOZERO_FOUND)
-        list(APPEND OSMIUM_PBF_LIBRARIES
-            ${ZLIB_LIBRARIES}
-            ${CMAKE_THREAD_LIBS_INIT}
-        )
-        list(APPEND OSMIUM_INCLUDE_DIRS
-            ${ZLIB_INCLUDE_DIR}
-            ${PROTOZERO_INCLUDE_DIR}
-        )
-    else()
-        message(WARNING "Osmium: Can not find some libraries for PBF input/output, please install them or configure the paths.")
-    endif()
-endif()
+  target_link_libraries(osmium INTERFACE protozero::protozero ZLIB::ZLIB Threads::Threads)
+endif(Osmium_USE_PBF)
 
 #----------------------------------------------------------------------
 # Component 'xml'
 if(Osmium_USE_XML)
-    find_package(EXPAT)
-    find_package(BZip2)
-    find_package(ZLIB)
-    find_package(Threads)
+  find_package(EXPAT REQUIRED)
+  find_package(BZip2 REQUIRED)
+  find_package(ZLIB REQUIRED)
+  find_package(Threads REQUIRED)
 
-    list(APPEND OSMIUM_EXTRA_FIND_VARS EXPAT_FOUND BZIP2_FOUND ZLIB_FOUND Threads_FOUND)
-    if(EXPAT_FOUND AND BZIP2_FOUND AND ZLIB_FOUND AND Threads_FOUND)
-        list(APPEND OSMIUM_XML_LIBRARIES
-            ${EXPAT_LIBRARIES}
-            ${BZIP2_LIBRARIES}
-            ${ZLIB_LIBRARIES}
-            ${CMAKE_THREAD_LIBS_INIT}
-        )
-        list(APPEND OSMIUM_INCLUDE_DIRS
-            ${EXPAT_INCLUDE_DIR}
-            ${BZIP2_INCLUDE_DIR}
-            ${ZLIB_INCLUDE_DIR}
-        )
-    else()
-        message(WARNING "Osmium: Can not find some libraries for XML input/output, please install them or configure the paths.")
-    endif()
-endif()
-
-#----------------------------------------------------------------------
-list(APPEND OSMIUM_IO_LIBRARIES
-    ${OSMIUM_PBF_LIBRARIES}
-    ${OSMIUM_XML_LIBRARIES}
-)
-
-list(APPEND OSMIUM_LIBRARIES
-    ${OSMIUM_IO_LIBRARIES}
-)
+  target_link_libraries(osmium INTERFACE EXPAT::EXPAT BZip2::BZip2 ZLIB::ZLIB Threads::Threads)
+endif(Osmium_USE_XML)
 
 #----------------------------------------------------------------------
 # Component 'geos'
 if(Osmium_USE_GEOS)
-    find_path(GEOS_INCLUDE_DIR geos/geom.h)
-    find_library(GEOS_LIBRARY NAMES geos)
-
-    list(APPEND OSMIUM_EXTRA_FIND_VARS GEOS_INCLUDE_DIR GEOS_LIBRARY)
-    if(GEOS_INCLUDE_DIR AND GEOS_LIBRARY)
-        SET(GEOS_FOUND 1)
-        list(APPEND OSMIUM_LIBRARIES ${GEOS_LIBRARY})
-        list(APPEND OSMIUM_INCLUDE_DIRS ${GEOS_INCLUDE_DIR})
-    else()
-        message(WARNING "Osmium: GEOS library is required but not found, please install it or configure the paths.")
-    endif()
-endif()
+  find_package(geos REQUIRED)
+  target_link_libraries(osmium INTERFACE geos::geos)
+endif(Osmium_USE_GEOS)
 
 #----------------------------------------------------------------------
 # Component 'gdal' (alias 'ogr')
 if(Osmium_USE_GDAL)
-    find_package(GDAL)
-
-    list(APPEND OSMIUM_EXTRA_FIND_VARS GDAL_FOUND)
-    if(GDAL_FOUND)
-        list(APPEND OSMIUM_LIBRARIES ${GDAL_LIBRARIES})
-        list(APPEND OSMIUM_INCLUDE_DIRS ${GDAL_INCLUDE_DIRS})
-    else()
-        message(WARNING "Osmium: GDAL library is required but not found, please install it or configure the paths.")
-    endif()
-endif()
+  find_package(gdal REQUIRED)
+  target_link_libraries(osmium INTERFACE gdal::gdal)
+endif(Osmium_USE_GDAL)
 
 #----------------------------------------------------------------------
 # Component 'proj'
 if(Osmium_USE_PROJ)
-    find_path(PROJ_INCLUDE_DIR proj_api.h)
-    find_library(PROJ_LIBRARY NAMES proj)
-
-    list(APPEND OSMIUM_EXTRA_FIND_VARS PROJ_INCLUDE_DIR PROJ_LIBRARY)
-    if(PROJ_INCLUDE_DIR AND PROJ_LIBRARY)
-        set(PROJ_FOUND 1)
-        list(APPEND OSMIUM_LIBRARIES ${PROJ_LIBRARY})
-        list(APPEND OSMIUM_INCLUDE_DIRS ${PROJ_INCLUDE_DIR})
-    else()
-        message(WARNING "Osmium: PROJ.4 library is required but not found, please install it or configure the paths.")
-    endif()
-endif()
+  find_package(proj REQUIRED)
+  target_link_libraries(osmium INTERFACE proj::proj)
+endif(Osmium_USE_PROJ)
 
 #----------------------------------------------------------------------
 # Component 'sparsehash'
 if(Osmium_USE_SPARSEHASH)
-    find_path(SPARSEHASH_INCLUDE_DIR google/sparsetable)
-
-    list(APPEND OSMIUM_EXTRA_FIND_VARS SPARSEHASH_INCLUDE_DIR)
-    if(SPARSEHASH_INCLUDE_DIR)
-        # Find size of sparsetable::size_type. This does not work on older
-        # CMake versions because they can do this check only in C, not in C++.
-        if(NOT CMAKE_VERSION VERSION_LESS 3.0)
-           include(CheckTypeSize)
-           set(CMAKE_REQUIRED_INCLUDES ${SPARSEHASH_INCLUDE_DIR})
-           set(CMAKE_EXTRA_INCLUDE_FILES "google/sparsetable")
-           check_type_size("google::sparsetable<int>::size_type" SPARSETABLE_SIZE_TYPE LANGUAGE CXX)
-           set(CMAKE_EXTRA_INCLUDE_FILES)
-           set(CMAKE_REQUIRED_INCLUDES)
-        else()
-           set(SPARSETABLE_SIZE_TYPE ${CMAKE_SIZEOF_VOID_P})
-        endif()
-
-        # Sparsetable::size_type must be at least 8 bytes (64bit), otherwise
-        # OSM object IDs will not fit.
-        if(SPARSETABLE_SIZE_TYPE GREATER 7)
-            set(SPARSEHASH_FOUND 1)
-            add_definitions(-DOSMIUM_WITH_SPARSEHASH=${SPARSEHASH_FOUND})
-            list(APPEND OSMIUM_INCLUDE_DIRS ${SPARSEHASH_INCLUDE_DIR})
-        else()
-            message(WARNING "Osmium: Disabled Google SparseHash library on 32bit system (size_type=${SPARSETABLE_SIZE_TYPE}).")
-        endif()
-    else()
-        message(WARNING "Osmium: Google SparseHash library is required but not found, please install it or configure the paths.")
-    endif()
-endif()
-
-#----------------------------------------------------------------------
-
-list(REMOVE_DUPLICATES OSMIUM_INCLUDE_DIRS)
-
-if(OSMIUM_XML_LIBRARIES)
-    list(REMOVE_DUPLICATES OSMIUM_XML_LIBRARIES)
-endif()
-
-if(OSMIUM_PBF_LIBRARIES)
-    list(REMOVE_DUPLICATES OSMIUM_PBF_LIBRARIES)
-endif()
-
-if(OSMIUM_IO_LIBRARIES)
-    list(REMOVE_DUPLICATES OSMIUM_IO_LIBRARIES)
-endif()
-
-if(OSMIUM_LIBRARIES)
-    list(REMOVE_DUPLICATES OSMIUM_LIBRARIES)
-endif()
-
-#----------------------------------------------------------------------
-#
-#  Check that all required libraries are available
-#
-#----------------------------------------------------------------------
-if(OSMIUM_EXTRA_FIND_VARS)
-    list(REMOVE_DUPLICATES OSMIUM_EXTRA_FIND_VARS)
-endif()
-# Handle the QUIETLY and REQUIRED arguments and the optional version check
-# and set OSMIUM_FOUND to TRUE if all listed variables are TRUE.
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Osmium
-                                  REQUIRED_VARS OSMIUM_INCLUDE_DIR ${OSMIUM_EXTRA_FIND_VARS}
-                                  VERSION_VAR _libosmium_version)
-unset(OSMIUM_EXTRA_FIND_VARS)
-
-#----------------------------------------------------------------------
-#
-#  A function for setting the -pthread option in compilers/linkers
-#
-#----------------------------------------------------------------------
-function(set_pthread_on_target _target)
-    if(NOT MSVC)
-        set_target_properties(${_target} PROPERTIES COMPILE_FLAGS "-pthread")
-        if(NOT APPLE)
-            set_target_properties(${_target} PROPERTIES LINK_FLAGS "-pthread")
-        endif()
-    endif()
-endfunction()
+  find_package(sparsehash QUIET)
+
+  if(sparsehash_FOUND)
+    # Find size of sparsetable::size_type. This does not work on older
+    # CMake versions because they can do this check only in C, not in C++.
+    if(NOT CMAKE_VERSION VERSION_LESS 3.0)
+      include(CheckTypeSize)
+      set(CMAKE_REQUIRED_INCLUDES ${SPARSEHASH_INCLUDE_DIR})
+      set(CMAKE_EXTRA_INCLUDE_FILES "google/sparsetable")
+      check_type_size("google::sparsetable<int>::size_type" SPARSETABLE_SIZE_TYPE LANGUAGE CXX)
+      set(CMAKE_EXTRA_INCLUDE_FILES)
+      set(CMAKE_REQUIRED_INCLUDES)
+    else(NOT CMAKE_VERSION VERSION_LESS 3.0)
+      set(SPARSETABLE_SIZE_TYPE ${CMAKE_SIZEOF_VOID_P})
+    endif(NOT CMAKE_VERSION VERSION_LESS 3.0)
+
+    # Sparsetable::size_type must be at least 8 bytes (64bit), otherwise
+    # OSM object IDs will not fit.
+    if(SPARSETABLE_SIZE_TYPE GREATER 7)
+      set(SPARSEHASH_FOUND 1)
+      set_target_properties(osmium PROPERTIES INTERFACE_COMPILE_DEFINITIONS -DOSMIUM_WITH_SPARSEHASH=${SPARSEHASH_FOUND})
+    else(SPARSETABLE_SIZE_TYPE GREATER 7)
+      message(WARNING "Osmium: Disabled Google SparseHash library on 32bit system (size_type=${SPARSETABLE_SIZE_TYPE}).")
+    endif(SPARSETABLE_SIZE_TYPE GREATER 7)
+  else(sparsehash_FOUND)
+    message(WARNING "Osmium: Google SparseHash library is required but not found, please install it or configure the paths.")
+  endif(sparsehash_FOUND)
+endif(Osmium_USE_SPARSEHASH)
 
 #----------------------------------------------------------------------
 #
@@ -305,34 +163,34 @@ endfunction()
 add_definitions(-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64)
 
 if(MSVC)
-    add_definitions(-wd4996)
+  add_definitions(-wd4996)
 
-    # Disable warning C4068: "unknown pragma" because we want it to ignore
-    # pragmas for other compilers.
-    add_definitions(-wd4068)
+  # Disable warning C4068: "unknown pragma" because we want it to ignore
+  # pragmas for other compilers.
+  add_definitions(-wd4068)
 
-    # Disable warning C4715: "not all control paths return a value" because
-    # it generates too many false positives.
-    add_definitions(-wd4715)
+  # Disable warning C4715: "not all control paths return a value" because
+  # it generates too many false positives.
+  add_definitions(-wd4715)
 
-    # Disable warning C4351: new behavior: elements of array '...' will be
-    # default initialized. The new behaviour is correct and we don't support
-    # old compilers anyway.
-    add_definitions(-wd4351)
+  # Disable warning C4351: new behavior: elements of array '...' will be
+  # default initialized. The new behaviour is correct and we don't support
+  # old compilers anyway.
+  add_definitions(-wd4351)
 
-    # Disable warning C4503: "decorated name length exceeded, name was truncated"
-    # there are more than 150 of generated names in libosmium longer than 4096 symbols supported in MSVC
-    add_definitions(-wd4503)
+  # Disable warning C4503: "decorated name length exceeded, name was truncated"
+  # there are more than 150 of generated names in libosmium longer than 4096 symbols supported in MSVC
+  add_definitions(-wd4503)
 
-    add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_WARNINGS)
+  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_WARNINGS)
 endif()
 
 if(APPLE AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
-# following only available from cmake 2.8.12:
-#   add_compile_options(-stdlib=libc++)
-# so using this instead:
-    add_definitions(-stdlib=libc++)
-    set(LDFLAGS ${LDFLAGS} -stdlib=libc++)
+  # following only available from cmake 2.8.12:
+  #   add_compile_options(-stdlib=libc++)
+  # so using this instead:
+  add_definitions(-stdlib=libc++)
+  set(LDFLAGS ${LDFLAGS} -stdlib=libc++)
 endif()
 
 #----------------------------------------------------------------------
@@ -340,18 +198,17 @@ endif()
 # This is a set of recommended warning options that can be added when compiling
 # libosmium code.
 if(MSVC)
-    set(OSMIUM_WARNING_OPTIONS "/W3 /wd4514" CACHE STRING "Recommended warning options for libosmium")
+  set(OSMIUM_WARNING_OPTIONS "/W3 /wd4514" CACHE STRING "Recommended warning options for libosmium")
 else()
-    set(OSMIUM_WARNING_OPTIONS "-Wall -Wextra -pedantic -Wredundant-decls -Wdisabled-optimization -Wctor-dtor-privacy -Wnon-virtual-dtor -Woverloaded-virtual -Wsign-promo -Wold-style-cast" CACHE STRING "Recommended warning options for libosmium")
+  set(OSMIUM_WARNING_OPTIONS "-Wall -Wextra -pedantic -Wredundant-decls -Wdisabled-optimization -Wctor-dtor-privacy -Wnon-virtual-dtor -Woverloaded-virtual -Wsign-promo -Wold-style-cast" CACHE STRING "Recommended warning options for libosmium")
 endif()
 
 set(OSMIUM_DRACONIC_CLANG_OPTIONS "-Wdocumentation -Wunused-exception-parameter -Wmissing-declarations -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-unused-macros -Wno-exit-time-destructors -Wno-global-constructors -Wno-padded -Wno-switch-enum -Wno-missing-prototypes -Wno-weak-vtables -Wno-cast-align -Wno-float-equal")
 
 if(Osmium_DEBUG)
-    message(STATUS "OSMIUM_XML_LIBRARIES=${OSMIUM_XML_LIBRARIES}")
-    message(STATUS "OSMIUM_PBF_LIBRARIES=${OSMIUM_PBF_LIBRARIES}")
-    message(STATUS "OSMIUM_IO_LIBRARIES=${OSMIUM_IO_LIBRARIES}")
-    message(STATUS "OSMIUM_LIBRARIES=${OSMIUM_LIBRARIES}")
-    message(STATUS "OSMIUM_INCLUDE_DIRS=${OSMIUM_INCLUDE_DIRS}")
+  message(STATUS "OSMIUM_XML_LIBRARIES=${OSMIUM_XML_LIBRARIES}")
+  message(STATUS "OSMIUM_PBF_LIBRARIES=${OSMIUM_PBF_LIBRARIES}")
+  message(STATUS "OSMIUM_IO_LIBRARIES=${OSMIUM_IO_LIBRARIES}")
+  message(STATUS "OSMIUM_LIBRARIES=${OSMIUM_LIBRARIES}")
+  message(STATUS "OSMIUM_INCLUDE_DIRS=${OSMIUM_INCLUDE_DIRS}")
 endif()
-
diff --git a/cmake/FindProtozero.cmake b/cmake/FindProtozero.cmake
deleted file mode 100644
index ad16cabe..00000000
--- a/cmake/FindProtozero.cmake
+++ /dev/null
@@ -1,63 +0,0 @@
-#----------------------------------------------------------------------
-#
-#  FindProtozero.cmake
-#
-#  Find the protozero headers.
-#
-#----------------------------------------------------------------------
-#
-#  Usage:
-#
-#    Copy this file somewhere into your project directory, where cmake can
-#    find it. Usually this will be a directory called "cmake" which you can
-#    add to the CMake module search path with the following line in your
-#    CMakeLists.txt:
-#
-#      list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
-#
-#    Then add the following in your CMakeLists.txt:
-#
-#      find_package(Protozero [version] [REQUIRED])
-#      include_directories(SYSTEM ${PROTOZERO_INCLUDE_DIR})
-#
-#    The version number is optional. If it is not set, any version of
-#    protozero will do.
-#
-#      if(NOT PROTOZERO_FOUND)
-#          message(WARNING "Protozero not found!\n")
-#      endif()
-#
-#----------------------------------------------------------------------
-#
-#  Variables:
-#
-#    PROTOZERO_FOUND        - True if Protozero was found.
-#    PROTOZERO_INCLUDE_DIR  - Where to find include files.
-#
-#----------------------------------------------------------------------
-
-# find include path
-find_path(PROTOZERO_INCLUDE_DIR protozero/version.hpp
-    PATH_SUFFIXES include
-    PATHS ${CMAKE_SOURCE_DIR}/../protozero
-)
-
-# Check version number
-if(Protozero_FIND_VERSION)
-    file(STRINGS "${PROTOZERO_INCLUDE_DIR}/protozero/version.hpp" _version_define REGEX "#define PROTOZERO_VERSION_STRING")
-    if("${_version_define}" MATCHES "#define PROTOZERO_VERSION_STRING \"([0-9.]+)\"")
-        set(_version "${CMAKE_MATCH_1}")
-    else()
-        set(_version "unknown")
-    endif()
-endif()
-
-#set(PROTOZERO_INCLUDE_DIRS "${PROTOZERO_INCLUDE_DIR}")
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(Protozero
-                                  REQUIRED_VARS PROTOZERO_INCLUDE_DIR
-                                  VERSION_VAR _version)
-
-
-#----------------------------------------------------------------------
diff --git a/cmake/Findgdal.cmake b/cmake/Findgdal.cmake
new file mode 100644
index 00000000..6b67c0f7
--- /dev/null
+++ b/cmake/Findgdal.cmake
@@ -0,0 +1,51 @@
+# Findgdal.cmake
+#
+# Finds the gdal library
+#
+# This will define the following variables
+#
+#       gdal_FOUND
+#       gdal_INCLUDE_DIRS
+#       gdal_LIBRARIES
+#
+# and the following targets
+#
+#       gdal::gdal
+#
+# Author: amit.ambasta@delhivery.com
+
+find_package(PkgConfig)
+pkg_check_modules(PC_gdal QUIET gdal)
+
+find_path(
+  gdal_INCLUDE_DIR
+  NAMES gdal.h
+  PATHS ${PC_gdal_INCLUDE_DIRS}
+  PATH_SUFFIXES gdal
+)
+set(gdal_VERSION ${PC_gdal_VERSION})
+set(gdal_LIBRARIES ${PC_gdal_LIBRARIES})
+
+mark_as_advanced(gdal_FOUND gdal_INCLUDE_DIR gdal_LIBRARIES gdal_VERSION)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  gdal
+  REQUIRED_VARS gdal_INCLUDE_DIR gdal_LIBRARIES
+  VERSION_VAR gdal_VERSION
+)
+
+if(gdal_FOUND)
+  set(gdal_INCLUDE_DIRS ${gdal_INCLUDE_DIR})
+  set(gdal_LIBRARIES ${gdal_LIBRARIES})
+endif(gdal_FOUND)
+
+if(gdal_FOUND AND NOT TARGET gdal::gdal)
+  add_library(gdal::gdal INTERFACE IMPORTED)
+  set_target_properties(
+    gdal::gdal
+    PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES ${gdal_INCLUDE_DIR}
+    INTERFACE_LINK_LIBRARIES ${gdal_LIBRARIES}
+  )
+endif(gdal_FOUND AND NOT TARGET gdal::gdal)
diff --git a/cmake/Findgeos.cmake b/cmake/Findgeos.cmake
new file mode 100644
index 00000000..2e3a5d78
--- /dev/null
+++ b/cmake/Findgeos.cmake
@@ -0,0 +1,40 @@
+# Findgeos.cmake
+#
+# Finds the geos library
+#
+# This will define the following variables
+#
+#       geos_FOUND
+#       geos_INCLUDE_DIRS
+#       geos_LIBRARIES
+#
+# and the following targets
+#
+#       geos::geos
+#
+# Author: amit.ambasta@delhivery.com
+
+find_path(geos_INCLUDE_DIR geos/geom.h)
+find_library(geos_LIBRARY NAMES geos)
+
+set(geos_VERSION "unknown")
+
+mark_as_advanced(geos_FOUND geos_INCLUDE_DIR geos_LIBRARY geos_VERSION)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(geos REQUIRED_VARS geos_INCLUDE_DIR geos_LIBRARY VERSION_VAR geos_VERSION)
+
+if(geos_FOUND)
+  set(geos_INCLUDE_DIRS ${geos_INCLUDE_DIR})
+  set(geos_LIBRARIES ${geos_LIBRARY})
+endif(geos_FOUND)
+
+if(geos_FOUND AND NOT TARGET geos::geos)
+  add_library(geos::geos INTERFACE IMPORTED)
+  set_target_properties(
+    geos::geos
+    PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES "${geos_INCLUDE_DIR}"
+    INTERFACE_LINK_LIBRARIES "${geos_LIBRARY}"
+  )
+endif(geos_FOUND AND NOT TARGET geos::geos)
diff --git a/cmake/Findproj.cmake b/cmake/Findproj.cmake
new file mode 100644
index 00000000..fc8b89a2
--- /dev/null
+++ b/cmake/Findproj.cmake
@@ -0,0 +1,51 @@
+# Findproj.cmake
+#
+# Finds the proj library
+#
+# This will define the following variables
+#
+#       proj_FOUND
+#       proj_INCLUDE_DIRS
+#       proj_LIBRARIES
+#
+# and the following targets
+#
+#       proj::proj
+#
+# Author: amit.ambasta@delhivery.com
+
+find_package(PkgConfig)
+pkg_check_modules(PC_proj QUIET proj)
+
+find_path(
+  proj_INCLUDE_DIR
+  NAMES proj.h
+  PATHS ${PC_proj_INCLUDE_DIRS}
+  PATH_SUFFIXES proj
+)
+set(proj_VERSION ${PC_proj_VERSION})
+set(proj_LIBRARIES ${PC_proj_LIBRARIES})
+
+mark_as_advanced(proj_FOUND proj_INCLUDE_DIR proj_LIBRARIES proj_VERSION)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  proj
+  REQUIRED_VARS proj_INCLUDE_DIR proj_LIBRARIES
+  VERSION_VAR proj_VERSION
+)
+
+if(proj_FOUND)
+  set(proj_INCLUDE_DIRS ${proj_INCLUDE_DIR})
+  set(proj_LIBRARIES ${proj_LIBRARIES})
+endif(proj_FOUND)
+
+if(proj_FOUND AND NOT TARGET proj::proj)
+  add_library(proj::proj INTERFACE IMPORTED)
+  set_target_properties(
+    proj::proj
+    PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES ${proj_INCLUDE_DIR}
+    INTERFACE_LINK_LIBRARIES ${proj_LIBRARIES}
+  )
+endif(proj_FOUND AND NOT TARGET proj::proj)
diff --git a/cmake/Findsparsehash.cmake b/cmake/Findsparsehash.cmake
new file mode 100644
index 00000000..6d67cd6c
--- /dev/null
+++ b/cmake/Findsparsehash.cmake
@@ -0,0 +1,46 @@
+# Findlibsparsehash.cmake
+#
+# Finds the libsparsehash library
+#
+# This will define the following variables
+#
+#       libsparsehash_FOUND
+#       libsparsehash_INCLUDE_DIRS
+#
+# and the following targets
+#
+#       libsparsehash::libsparsehash
+#
+# Author: amit.ambasta@delhivery.com
+
+find_package(PkgConfig)
+pkg_check_modules(PC_sparsehash QUIET libsparsehash)
+
+find_path(
+  sparsehash_INCLUDE_DIR
+  NAMES sparsetable
+  PATHS ${PC_sparsehash_INCLUDE_DIRS}
+  PATH_SUFFIXES sparsehash
+)
+set(sparsehash_VERSION ${PC_sparsehash_VERSION})
+mark_as_advanced(sparsehash_FOUND sparsehash_INCLUDE_DIR sparsehash_VERSION)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(
+  sparsehash
+  REQUIRED_VARS sparsehash_INCLUDE_DIR
+  VERSION_VAR sparsehash_VERSION
+)
+
+if(sparsehash_FOUND)
+  set(sparsehash_INCLUDE_DIRS ${libsparsehash_INCLUDE_DIR})
+endif(sparsehash_FOUND)
+
+if(sparsehash_FOUND AND NOT TARGET sparsehash::sparsehash)
+  add_library(sparsehash::sparsehash INTERFACE IMPORTED)
+  set_target_properties(
+    sparsehash::sparsehash
+    PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES ${sparsehash_INCLUDE_DIR}
+  )
+endif(sparsehash_FOUND AND NOT TARGET sparsehash::sparsehash)
diff --git a/cmake/osmiumConfig.cmake.in b/cmake/osmiumConfig.cmake.in
new file mode 100644
index 00000000..4c43e1ee
--- /dev/null
+++ b/cmake/osmiumConfig.cmake.in
@@ -0,0 +1,20 @@
+@PACKAGE_INIT@
+
+get_filename_component(@PROJECT_NAME@_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+
+include(CMakeFindDependencyMacro)
+
+find_dependency(Boost 1.38 REQUIRED COMPONENTS system)
+find_dependency(protozero 1.6.3 REQUIRED)
+find_dependency(EXPAT REQUIRED)
+find_dependency(BZip2 REQUIRED)
+find_dependency(ZLIB REQUIRED)
+find_dependency(Threads REQUIRED)
+find_dependency(geos REQUIRED)
+find_dependency(gdal REQUIRED)
+find_dependency(proj REQUIRED)
+find_dependency(sparsehash QUIET)
+
+if(NOT TARGET @PROJECT_NAME@::@PROJECT_NAME@)
+  include("${@PROJECT_NAME@_CMAKE_DIR}/@PROJECT_NAME@Targets.cmake")
+endif()
diff --git a/cmake/osmiumUtils.cmake b/cmake/osmiumUtils.cmake
new file mode 100644
index 00000000..c328e1b1
--- /dev/null
+++ b/cmake/osmiumUtils.cmake
@@ -0,0 +1,13 @@
+#----------------------------------------------------------------------
+#
+#  A function for setting the -pthread option in compilers/linkers
+#
+#----------------------------------------------------------------------
+function(set_pthread_on_target _target)
+  if(NOT MSVC)
+    set_target_properties(${_target} PROPERTIES COMPILE_FLAGS "-pthread")
+    if(NOT APPLE)
+      set_target_properties(${_target} PROPERTIES LINK_FLAGS "-pthread")
+    endif()
+  endif()
+endfunction()
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index c1498cc3..2e4a66cd 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -40,7 +40,7 @@ foreach(example ${EXAMPLES})
     message(STATUS "  - osmium_${example}")
     add_executable(osmium_${example} "osmium_${example}.cpp")
     set_pthread_on_target(osmium_${example})
-    target_link_libraries(osmium_${example} ${OSMIUM_IO_LIBRARIES} ${EXAMPLE_LIBS_${example}})
+    target_link_libraries(osmium_${example} osmium ${EXAMPLE_LIBS_${example}})
     add_test(NAME examples_usage_${example} COMMAND osmium_${example})
     set_tests_properties(examples_usage_${example} PROPERTIES
                          PASS_REGULAR_EXPRESSION "^Usage: "
diff --git a/include/osmium/version.hpp b/include/osmium/version.hpp.in
similarity index 87%
rename from include/osmium/version.hpp
rename to include/osmium/version.hpp.in
index c83af2b0..87ba80f2 100644
--- a/include/osmium/version.hpp
+++ b/include/osmium/version.hpp.in
@@ -33,10 +33,10 @@ DEALINGS IN THE SOFTWARE.
 
 */
 
-#define LIBOSMIUM_VERSION_MAJOR 2
-#define LIBOSMIUM_VERSION_MINOR 15
-#define LIBOSMIUM_VERSION_PATCH 6
+#define LIBOSMIUM_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
+#define LIBOSMIUM_VERSION_MINOR @PROJECT_VERSION_MINOR@
+#define LIBOSMIUM_VERSION_PATCH @PROJECT_VERSION_PATCH@
 
-#define LIBOSMIUM_VERSION_STRING "2.15.6"
+#define LIBOSMIUM_VERSION_STRING "@PROJECT_VERSION@"
 
 #endif // OSMIUM_VERSION_HPP
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index ea54cff0..da2e6104 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -14,16 +14,17 @@ include_directories(SYSTEM catch)
 include_directories(include)
 
 add_library(testlib STATIC test_main.cpp)
+target_link_libraries(testlib osmium)
 
 set(ALL_TESTS "")
 
 # Otherwise GCC throws a lot of warnings for REQUIRE(...) from Catch v.1.2.1
 if(CMAKE_COMPILER_IS_GNUCXX)
-    add_definitions(-Wno-parentheses)
+  add_definitions(-Wno-parentheses)
 endif()
 
 if(NOT MSVC)
-    add_definitions(-Wno-deprecated-declarations)
+  add_definitions(-Wno-deprecated-declarations)
 endif()
 
 
@@ -41,57 +42,61 @@ endif()
 #
 #-----------------------------------------------------------------------------
 function(add_unit_test _tgroup _tname)
-    set(_testid "${_tgroup}_${_tname}")
-    set(_tpath "${_tgroup}/${_tname}")
+  set(_testid "${_tgroup}_${_tname}")
+  set(_tpath "${_tgroup}/${_tname}")
 
-    set(ALL_TESTS "${ALL_TESTS};${_tpath}" PARENT_SCOPE)
+  set(ALL_TESTS "${ALL_TESTS};${_tpath}" PARENT_SCOPE)
 
-    cmake_parse_arguments(_param "" "ENABLE_IF" "LIBS;LABELS" ${ARGN})
+  cmake_parse_arguments(_param "" "ENABLE_IF" "LIBS;LABELS" ${ARGN})
 
+  if(Osmium_DEBUG)
+    message("${_testid} ENABLE_IF=[${_param_ENABLE_IF}] LIBS=[${_param_LIBS}] LABELS=[${_param_LABELS}]")
+  endif()
+
+  if((NOT(DEFINED _param_ENABLE_IF)) OR (_param_ENABLE_IF))
     if(Osmium_DEBUG)
-        message("${_testid} ENABLE_IF=[${_param_ENABLE_IF}] LIBS=[${_param_LIBS}] LABELS=[${_param_LABELS}]")
+      message("Adding test: ${_tpath}")
+    endif()
+    add_executable(${_testid} t/${_tpath}.cpp)
+    target_link_libraries(${_testid} testlib)
+
+    if(DEFINED _param_LIBS)
+      if(Osmium_DEBUG)
+        message("  Adding libs: ${_param_LIBS}")
+      endif()
+      target_link_libraries(${_testid} ${_param_LIBS})
+      if(_param_LIBS MATCHES "lpthread")
+        set_pthread_on_target(${_testid})
+      endif()
     endif()
 
-    if((NOT(DEFINED _param_ENABLE_IF)) OR (_param_ENABLE_IF))
-        if(Osmium_DEBUG)
-            message("Adding test: ${_tpath}")
-        endif()
-        add_executable(${_testid} t/${_tpath}.cpp)
-        target_link_libraries(${_testid} testlib)
-
-        if(DEFINED _param_LIBS)
-            if(Osmium_DEBUG)
-                message("  Adding libs: ${_param_LIBS}")
-            endif()
-            target_link_libraries(${_testid} ${_param_LIBS})
-            if(_param_LIBS MATCHES "lpthread")
-                set_pthread_on_target(${_testid})
-            endif()
-        endif()
-
-        add_test(NAME ${_testid}
-                 WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-                 COMMAND ${_testid}
-        )
-
-        set(_labels "unit;fast;${_tgroup}")
-        if(DEFINED _param_LABELS)
-            if(Osmium_DEBUG)
-                message("  Adding labels: ${_param_LABELS}")
-            endif()
-            set(_labels "${_labels};${_param_LABELS}")
-        endif()
-
-        set_tests_properties(${_testid} PROPERTIES
-            LABELS "${_labels}"
-            ENVIRONMENT "OSMIUM_TEST_DATA_DIR=${CMAKE_CURRENT_SOURCE_DIR}"
-        )
-    else()
-        message("Skipped test ${_tpath} because a dependency was not found")
-        set(OSMIUM_SKIPPED_TESTS
-            "${OSMIUM_SKIPPED_TESTS} ${_tpath}"
-            CACHE STRING "Tests that were skipped because of missing dependecies")
+    add_test(
+      NAME ${_testid}
+      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+      COMMAND ${_testid}
+    )
+
+    set(_labels "unit;fast;${_tgroup}")
+    if(DEFINED _param_LABELS)
+      if(Osmium_DEBUG)
+        message("  Adding labels: ${_param_LABELS}")
+      endif()
+      set(_labels "${_labels};${_param_LABELS}")
     endif()
+
+    set_tests_properties(
+      ${_testid} PROPERTIES
+      LABELS "${_labels}"
+      ENVIRONMENT "OSMIUM_TEST_DATA_DIR=${CMAKE_CURRENT_SOURCE_DIR}"
+    )
+  else()
+    message("Skipped test ${_tpath} because a dependency was not found")
+    set(
+      OSMIUM_SKIPPED_TESTS
+      "${OSMIUM_SKIPPED_TESTS} ${_tpath}"
+      CACHE STRING "Tests that were skipped because of missing dependecies"
+    )
+  endif()
 endfunction()
 
 
@@ -102,23 +107,23 @@ endfunction()
 #-----------------------------------------------------------------------------
 
 if(NOT GEOS_FOUND)
-    set(GEOS_FOUND FALSE)
+  set(GEOS_FOUND FALSE)
 endif()
 
 if(NOT PROJ_FOUND)
-    set(PROJ_FOUND FALSE)
+  set(PROJ_FOUND FALSE)
 endif()
 
 if(NOT SPARSEHASH_FOUND)
-    set(SPARSEHASH_FOUND FALSE)
+  set(SPARSEHASH_FOUND FALSE)
 endif()
 
 if(NOT BZIP2_FOUND)
-    set(BZIP2_FOUND FALSE)
+  set(BZIP2_FOUND FALSE)
 endif()
 
 if(NOT Threads_FOUND)
-    set(Threads_FOUND FALSE)
+  set(Threads_FOUND FALSE)
 endif()
 
 
@@ -243,12 +248,12 @@ add_unit_test(util test_timer_enabled)
 file(GLOB TESTS_IN_DIR RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/t" t/*/test_*.cpp)
 
 foreach(file ${TESTS_IN_DIR})
-    string(REPLACE ".cpp" "" out1 ${file})
-    string(REPLACE "//" "/" tname ${out1})
-    list(FIND ALL_TESTS ${tname} found)
-    if(${found} EQUAL -1)
-        message(WARNING "Test '${tname}' not found in cmake config. It will not be run!")
-    endif()
+  string(REPLACE ".cpp" "" out1 ${file})
+  string(REPLACE "//" "/" tname ${out1})
+  list(FIND ALL_TESTS ${tname} found)
+  if(${found} EQUAL -1)
+    message(WARNING "Test '${tname}' not found in cmake config. It will not be run!")
+  endif()
 endforeach()
 
 
-- 
2.29.2

