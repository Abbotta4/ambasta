From e26dac8862af342bb9493d2acd93025a408fd74c Mon Sep 17 00:00:00 2001
From: Amit Prakash Ambasta <amit.prakash.ambasta@gmail.com>
Date: Thu, 18 Jul 2019 19:13:40 +0530
Subject: [PATCH] Allow system glfw

---
 setup.py | 287 +++++++++++++++++++++++++++++++++++--------------------
 1 file changed, 183 insertions(+), 104 deletions(-)

diff --git a/setup.py b/setup.py
index 398ed34..9a42541 100755
--- a/setup.py
+++ b/setup.py
@@ -54,19 +54,23 @@ def error(text):
     return text
 
 
-def pkg_config(pkg, *args):
+def pkg_config(pkg, *args, optional=False):
     try:
         return list(
             filter(
                 None,
                 shlex.split(
-                    subprocess.check_output([PKGCONFIG, pkg] + list(args))
-                    .decode('utf-8')
+                    subprocess.check_output([PKGCONFIG, pkg] +
+                                            list(args)).decode('utf-8')
                 )
             )
         )
     except subprocess.CalledProcessError:
-        raise SystemExit('The package {} was not found on your system'.format(error(pkg)))
+        if optional:
+            return []
+        raise SystemExit(
+            'The package {} was not found on your system'.format(error(pkg))
+        )
 
 
 def at_least_version(package, major, minor=0):
@@ -160,7 +164,9 @@ def get_sanitize_args(cc, ccver):
 
 def test_compile(cc, *cflags, src=None):
     src = src or 'int main(void) { return 0; }'
-    p = subprocess.Popen([cc] + list(cflags) + ['-x', 'c', '-o', os.devnull, '-'], stdin=subprocess.PIPE)
+    p = subprocess.Popen([cc] + list(cflags) +
+                         ['-x', 'c', '-o', os.devnull, '-'],
+                         stdin=subprocess.PIPE)
     try:
         p.stdin.write(src.encode('utf-8')), p.stdin.close()
     except BrokenPipeError:
@@ -181,17 +187,25 @@ class Env:
         self.cc, self.cppflags, self.cflags, self.ldflags, self.ldpaths = cc, cppflags, cflags, ldflags, ldpaths
 
     def copy(self):
-        return Env(self.cc, list(self.cppflags), list(self.cflags), list(self.ldflags), list(self.ldpaths))
+        return Env(
+            self.cc, list(self.cppflags), list(self.cflags),
+            list(self.ldflags), list(self.ldpaths)
+        )
 
 
 def init_env(
-    debug=False, sanitize=False, native_optimizations=True, profile=False,
+    debug=False,
+    sanitize=False,
+    native_optimizations=True,
+    profile=False,
     extra_logging=()
 ):
     native_optimizations = native_optimizations and not sanitize and not debug
     cc, ccver = cc_version()
     print('CC:', cc, ccver)
-    stack_protector = first_successful_compile(cc, '-fstack-protector-strong', '-fstack-protector')
+    stack_protector = first_successful_compile(
+        cc, '-fstack-protector-strong', '-fstack-protector'
+    )
     missing_braces = ''
     if ccver < (5, 2) and cc == 'gcc':
         missing_braces = '-Wno-missing-braces'
@@ -201,11 +215,7 @@ def init_env(
     optimize = ''
     sanitize_args = get_sanitize_args(cc, ccver) if sanitize else set()
     cppflags = os.environ.get(
-        'OVERRIDE_CPPFLAGS', (
-            '-D{}DEBUG'
-        ).format(
-            ('' if debug else 'N'),
-        )
+        'OVERRIDE_CPPFLAGS', ('-D{}DEBUG').format(('' if debug else 'N'), )
     )
     cppflags = shlex.split(cppflags)
     for el in extra_logging:
@@ -226,8 +236,7 @@ def init_env(
         sysconfig.get_config_var('CCSHARED')
     )
     ldflags = os.environ.get(
-        'OVERRIDE_LDFLAGS',
-        '-Wall ' + ' '.join(sanitize_args)
+        'OVERRIDE_LDFLAGS', '-Wall ' + ' '.join(sanitize_args)
     )
     ldflags = shlex.split(ldflags)
     ldflags.append('-shared')
@@ -268,7 +277,9 @@ def kitty_env():
     cflags.extend(pkg_config('harfbuzz', '--cflags-only-I'))
     font_libs.extend(pkg_config('harfbuzz', '--libs'))
     pylib = get_python_flags(cflags)
-    gl_libs = ['-framework', 'OpenGL'] if is_macos else pkg_config('gl', '--libs')
+    gl_libs = ['-framework', 'OpenGL'] if is_macos else pkg_config(
+        'gl', '--libs', optional=True
+    )
     libpng = pkg_config('libpng', '--libs')
     ans.ldpaths += pylib + font_libs + gl_libs + libpng
     if is_macos:
@@ -358,7 +369,8 @@ def parallel_run(todo, desc='Compiling {} ...'):
             return
         pid, s = os.wait()
         name, cmd, w = workers.pop(pid, (None, None, None))
-        if name is not None and ((s & 0xff) != 0 or ((s >> 8) & 0xff) != 0) and failed is None:
+        if name is not None and ((s & 0xff) != 0 or
+                                 ((s >> 8) & 0xff) != 0) and failed is None:
             failed = name, cmd
 
     while items and failed is None:
@@ -368,7 +380,9 @@ def parallel_run(todo, desc='Compiling {} ...'):
                 print(' '.join(cmd))
             else:
                 print(desc.format(emphasis(name)))
-            w = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
+            w = subprocess.Popen(
+                cmd, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT
+            )
             workers[w.pid] = name, cmd, w
         wait()
     while len(workers):
@@ -377,7 +391,9 @@ def parallel_run(todo, desc='Compiling {} ...'):
         run_tool(failed[1])
 
 
-def compile_c_extension(kenv, module, incremental, compilation_database, all_keys, sources, headers):
+def compile_c_extension(
+    kenv, module, incremental, compilation_database, all_keys, sources, headers
+):
     prefix = os.path.basename(module)
     objects = [
         os.path.join(build_dir, prefix + '-' + os.path.basename(src) + '.o')
@@ -396,7 +412,8 @@ def compile_c_extension(kenv, module, incremental, compilation_database, all_key
 
         if src == 'kitty/data-types.c':
             if os.path.exists('.git'):
-                rev = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('utf-8').strip()
+                rev = subprocess.check_output(['git', 'rev-parse',
+                                               'HEAD']).decode('utf-8').strip()
                 cppflags.append(define('KITTY_VCS_REV="{}"'.format(rev)))
         cmd = [kenv.cc, '-MMD'] + cppflags + kenv.cflags
         key = original_src, os.path.basename(dest)
@@ -404,9 +421,7 @@ def compile_c_extension(kenv, module, incremental, compilation_database, all_key
         cmd_changed = compilation_database.get(key, [])[:-4] != cmd
         must_compile = not incremental or cmd_changed
         src = os.path.join(base, src)
-        if must_compile or newer(
-            dest, *dependecies_for(src, dest, headers)
-        ):
+        if must_compile or newer(dest, *dependecies_for(src, dest, headers)):
             cmd += ['-c', src] + ['-o', dest]
             compilation_database[key] = cmd
             todo[original_src] = cmd
@@ -421,7 +436,9 @@ def compile_c_extension(kenv, module, incremental, compilation_database, all_key
         unsafe = {'-pthread', '-Werror', '-pedantic-errors'}
         linker_cflags = list(filter(lambda x: x not in unsafe, kenv.cflags))
         try:
-            run_tool([kenv.cc] + linker_cflags + kenv.ldflags + objects + kenv.ldpaths + ['-o', dest], desc='Linking {} ...'.format(emphasis(module)))
+            run_tool([kenv.cc] + linker_cflags + kenv.ldflags + objects +
+                     kenv.ldpaths + ['-o', dest],
+                     desc='Linking {} ...'.format(emphasis(module)))
         except Exception:
             with suppress(EnvironmentError):
                 os.remove(dest)
@@ -432,7 +449,9 @@ def compile_c_extension(kenv, module, incremental, compilation_database, all_key
 def find_c_files():
     ans, headers = [], []
     d = os.path.join(base, 'kitty')
-    exclude = {'fontconfig.c', 'freetype.c', 'desktop.c'} if is_macos else {'core_text.m', 'cocoa_window.m', 'macos_process_info.c'}
+    exclude = {'fontconfig.c', 'freetype.c', 'desktop.c'} if is_macos else {
+        'core_text.m', 'cocoa_window.m', 'macos_process_info.c'
+    }
     for x in os.listdir(d):
         ext = os.path.splitext(x)[1]
         if ext in ('.c', '.m') and os.path.basename(x) not in exclude:
@@ -446,29 +465,6 @@ def find_c_files():
     return tuple(ans), tuple(headers)
 
 
-def compile_glfw(incremental, compilation_database, all_keys):
-    modules = 'cocoa' if is_macos else 'x11 wayland'
-    for module in modules.split():
-        try:
-            genv = glfw.init_env(env, pkg_config, at_least_version, test_compile, module)
-        except SystemExit as err:
-            if module != 'wayland':
-                raise
-            print(err, file=sys.stderr)
-            print(error('Disabling building of wayland backend'), file=sys.stderr)
-            continue
-        sources = [os.path.join('glfw', x) for x in genv.sources]
-        all_headers = [os.path.join('glfw', x) for x in genv.all_headers]
-        if module == 'wayland':
-            try:
-                glfw.build_wayland_protocols(genv, run_tool, emphasis, newer, os.path.join(base, 'glfw'))
-            except SystemExit as err:
-                print(err, file=sys.stderr)
-                print(error('Disabling building of wayland backend'), file=sys.stderr)
-                continue
-        compile_c_extension(genv, 'kitty/glfw-' + module, incremental, compilation_database, all_keys, sources, all_headers)
-
-
 def kittens_env():
     kenv = env.copy()
     cflags = kenv.cflags
@@ -485,22 +481,39 @@ def compile_kittens(incremental, compilation_database, all_keys):
     def list_files(q):
         return [os.path.relpath(x, base) for x in glob.glob(q)]
 
-    def files(kitten, output, extra_headers=(), extra_sources=(), filter_sources=None):
-        sources = list(filter(filter_sources, list(extra_sources) + list_files(os.path.join('kittens', kitten, '*.c'))))
-        headers = list_files(os.path.join('kittens', kitten, '*.h')) + list(extra_headers)
+    def files(
+        kitten,
+        output,
+        extra_headers=(),
+        extra_sources=(),
+        filter_sources=None
+    ):
+        sources = list(
+            filter(
+                filter_sources,
+                list(extra_sources) +
+                list_files(os.path.join('kittens', kitten, '*.c'))
+            )
+        )
+        headers = list_files(os.path.join('kittens', kitten, '*.h')
+                             ) + list(extra_headers)
         return (sources, headers, 'kittens/{}/{}'.format(kitten, output))
 
     for sources, all_headers, dest in (
         files('unicode_input', 'unicode_names'),
         files('diff', 'diff_speedup'),
         files(
-            'choose', 'subseq_matcher',
-            extra_headers=('kitty/charsets.h',),
-            extra_sources=('kitty/charsets.c',),
-            filter_sources=lambda x: 'windows_compat.c' not in x),
+            'choose',
+            'subseq_matcher',
+            extra_headers=('kitty/charsets.h', ),
+            extra_sources=('kitty/charsets.c', ),
+            filter_sources=lambda x: 'windows_compat.c' not in x
+        ),
     ):
         compile_c_extension(
-            kenv, dest, incremental, compilation_database, all_keys, sources, all_headers + ['kitty/data-types.h'])
+            kenv, dest, incremental, compilation_database, all_keys, sources,
+            all_headers + ['kitty/data-types.h']
+        )
 
 
 def build(args, native_optimizations=True):
@@ -511,22 +524,27 @@ def build(args, native_optimizations=True):
     except FileNotFoundError:
         compilation_database = []
     all_keys = set()
-    compilation_database = {
-        (k['file'], k.get('output')): k['arguments'] for k in compilation_database
-    }
-    env = init_env(args.debug, args.sanitize, native_optimizations, args.profile, args.extra_logging)
+    compilation_database = {(k['file'], k.get('output')): k['arguments']
+                            for k in compilation_database}
+    env = init_env(
+        args.debug, args.sanitize, native_optimizations, args.profile,
+        args.extra_logging
+    )
     try:
         compile_c_extension(
-            kitty_env(), 'kitty/fast_data_types', args.incremental, compilation_database, all_keys, *find_c_files()
+            kitty_env(), 'kitty/fast_data_types', args.incremental,
+            compilation_database, all_keys, *find_c_files()
         )
-        compile_glfw(args.incremental, compilation_database, all_keys)
         compile_kittens(args.incremental, compilation_database, all_keys)
         for key in set(compilation_database) - all_keys:
             del compilation_database[key]
     finally:
-        compilation_database = [
-            {'file': k[0], 'arguments': v, 'directory': base, 'output': k[1]} for k, v in compilation_database.items()
-        ]
+        compilation_database = [{
+            'file': k[0],
+            'arguments': v,
+            'directory': base,
+            'output': k[1]
+        } for k, v in compilation_database.items()]
         with open('compile_commands.json', 'w') as f:
             json.dump(compilation_database, f, indent=2, sort_keys=True)
 
@@ -549,7 +567,13 @@ def build_asan_launcher(args):
     run_tool(cmd, desc='Creating {} ...'.format(emphasis('asan-launcher')))
 
 
-def build_launcher(args, launcher_dir='.', for_bundle=False, sh_launcher=False, for_freeze=False):
+def build_launcher(
+    args,
+    launcher_dir='.',
+    for_bundle=False,
+    sh_launcher=False,
+    for_freeze=False
+):
     cflags = '-Wall -fpie'.split()
     cppflags = []
     libs = []
@@ -588,11 +612,13 @@ def copy_man_pages(ddir):
         shutil.rmtree(os.path.join(mandir, 'man1'))
     src = os.path.join(base, 'docs/_build/man')
     if not os.path.exists(src):
-        raise SystemExit('''\
+        raise SystemExit(
+            '''\
 The kitty man page is missing. If you are building from git then run:
 make && make docs
 (needs the sphinx documentation system to be installed)
-''')
+'''
+        )
     shutil.copytree(src, os.path.join(mandir, 'man1'))
 
 
@@ -603,11 +629,13 @@ def copy_html_docs(ddir):
         shutil.rmtree(htmldir)
     src = os.path.join(base, 'docs/_build/html')
     if not os.path.exists(src):
-        raise SystemExit('''\
+        raise SystemExit(
+            '''\
 The kitty html docs are missing. If you are building from git then run:
 make && make docs
 (needs the sphinx documentation system to be installed)
-''')
+'''
+        )
     shutil.copytree(src, htmldir)
 
 
@@ -623,9 +651,16 @@ def compile_python(base_path):
             if f.rpartition('.')[-1] in ('pyc', 'pyo'):
                 os.remove(os.path.join(root, f))
     for optimize in (0, 1, 2):
-        kwargs = dict(ddir='', force=True, optimize=optimize, quiet=1, workers=num_workers)
+        kwargs = dict(
+            ddir='',
+            force=True,
+            optimize=optimize,
+            quiet=1,
+            workers=num_workers
+        )
         if hasattr(py_compile, 'PycInvalidationMode'):
-            kwargs['invalidation_mode'] = py_compile.PycInvalidationMode.UNCHECKED_HASH
+            kwargs['invalidation_mode'
+                   ] = py_compile.PycInvalidationMode.UNCHECKED_HASH
         compileall.compile_dir(base_path, **kwargs)
 
 
@@ -651,32 +686,50 @@ def package(args, for_bundle=False, sh_launcher=False):
     def src_ignore(parent, entries):
         return [
             x for x in entries
-            if '.' in x and x.rpartition('.')[2] not in
-            ('py', 'so', 'glsl')
+            if '.' in x and x.rpartition('.')[2] not in ('py', 'so', 'glsl')
         ]
 
     shutil.copytree('kitty', os.path.join(libdir, 'kitty'), ignore=src_ignore)
-    shutil.copytree('kittens', os.path.join(libdir, 'kittens'), ignore=src_ignore)
+    shutil.copytree(
+        'kittens', os.path.join(libdir, 'kittens'), ignore=src_ignore
+    )
     if args.update_check_interval != 24.0:
-        with open(os.path.join(libdir, 'kitty/config_data.py'), 'r+', encoding='utf-8') as f:
+        with open(
+            os.path.join(libdir, 'kitty/config_data.py'),
+            'r+',
+            encoding='utf-8'
+        ) as f:
             raw = f.read()
-            nraw = raw.replace("update_check_interval', 24", "update_check_interval', {}".format(args.update_check_interval), 1)
+            nraw = raw.replace(
+                "update_check_interval', 24",
+                "update_check_interval', {}".format(
+                    args.update_check_interval
+                ), 1
+            )
             if nraw == raw:
-                raise SystemExit('Failed to change the value of update_check_interval')
+                raise SystemExit(
+                    'Failed to change the value of update_check_interval'
+                )
             f.seek(0), f.truncate(), f.write(nraw)
     compile_python(libdir)
     for root, dirs, files in os.walk(libdir):
         for f in files:
             path = os.path.join(root, f)
             os.chmod(path, 0o755 if f.endswith('.so') else 0o644)
-    shutil.copy2('kitty/launcher/kitty', os.path.join(libdir, 'kitty', 'launcher'))
+    shutil.copy2(
+        'kitty/launcher/kitty', os.path.join(libdir, 'kitty', 'launcher')
+    )
     launcher_dir = os.path.join(ddir, 'bin')
     safe_makedirs(launcher_dir)
-    build_launcher(args, launcher_dir, for_bundle, sh_launcher, args.for_freeze)
+    build_launcher(
+        args, launcher_dir, for_bundle, sh_launcher, args.for_freeze
+    )
     if not is_macos:  # {{{ linux desktop gunk
         copy_man_pages(ddir)
         copy_html_docs(ddir)
-        icdir = os.path.join(ddir, 'share', 'icons', 'hicolor', 'scalable', 'apps')
+        icdir = os.path.join(
+            ddir, 'share', 'icons', 'hicolor', 'scalable', 'apps'
+        )
         safe_makedirs(icdir)
         shutil.copy2('logo/kitty.svg', icdir)
         deskdir = os.path.join(ddir, 'share', 'applications')
@@ -720,9 +773,10 @@ Categories=System;TerminalEmulator;
             NSAppleScriptEnabled=False,
             # Needed for dark mode in Mojave when linking against older SDKs
             NSRequiresAquaSystemAppearance='NO',
-            NSHumanReadableCopyright=time.strftime(
-                'Copyright %Y, Kovid Goyal'),
-            CFBundleGetInfoString='kitty, an OpenGL based terminal emulator https://sw.kovidgoyal.net/kitty',
+            NSHumanReadableCopyright=time.
+            strftime('Copyright %Y, Kovid Goyal'),
+            CFBundleGetInfoString=
+            'kitty, an OpenGL based terminal emulator https://sw.kovidgoyal.net/kitty',
             CFBundleIconFile=appname + '.icns',
             NSHighResolutionCapable=True,
             NSSupportsAutomaticGraphicsSwitching=True,
@@ -730,16 +784,26 @@ Categories=System;TerminalEmulator;
             LSEnvironment={'KITTY_LAUNCHED_BY_LAUNCH_SERVICES': '1'},
             NSServices=[
                 {
-                    'NSMenuItem': {'default': 'New ' + appname + ' Tab Here'},
+                    'NSMenuItem': {
+                        'default': 'New ' + appname + ' Tab Here'
+                    },
                     'NSMessage': 'openTab',
-                    'NSRequiredContext': {'NSTextContent': 'FilePath'},
-                    'NSSendTypes': ['NSFilenamesPboardType', 'public.plain-text'],
+                    'NSRequiredContext': {
+                        'NSTextContent': 'FilePath'
+                    },
+                    'NSSendTypes':
+                    ['NSFilenamesPboardType', 'public.plain-text'],
                 },
                 {
-                    'NSMenuItem': {'default': 'New ' + appname + ' Window Here'},
+                    'NSMenuItem': {
+                        'default': 'New ' + appname + ' Window Here'
+                    },
                     'NSMessage': 'openOSWindow',
-                    'NSRequiredContext': {'NSTextContent': 'FilePath'},
-                    'NSSendTypes': ['NSFilenamesPboardType', 'public.plain-text'],
+                    'NSRequiredContext': {
+                        'NSTextContent': 'FilePath'
+                    },
+                    'NSSendTypes':
+                    ['NSFilenamesPboardType', 'public.plain-text'],
                 },
             ],
         )
@@ -749,16 +813,25 @@ Categories=System;TerminalEmulator;
         os.rename('../bin', 'MacOS')
         os.rename('../lib', 'Frameworks')
         if not os.path.exists(logo_dir):
-            raise SystemExit('The kitty logo has not been generated, you need to run logo/make.py')
+            raise SystemExit(
+                'The kitty logo has not been generated, you need to run logo/make.py'
+            )
         cmd = [env.cc] + ['-Wall', '-Werror'] + [
-                os.path.join(base, 'symlink-deref.c'), '-o', os.path.join('MacOS', 'kitty-deref-symlink')]
+            os.path.join(base, 'symlink-deref.c'), '-o',
+            os.path.join('MacOS', 'kitty-deref-symlink')
+        ]
         run_tool(cmd)
 
         subprocess.check_call([
             'iconutil', '-c', 'icns', logo_dir, '-o',
-            os.path.join('Resources', os.path.basename(logo_dir).partition('.')[0] + '.icns')
+            os.path.join(
+                'Resources',
+                os.path.basename(logo_dir).partition('.')[0] + '.icns'
+            )
         ])
     # }}}
+
+
 # }}}
 
 
@@ -787,7 +860,8 @@ def clean():
     safe_remove('build', 'compile_commands.json', 'linux-package', 'kitty.app')
     for root, dirs, files in os.walk('.'):
         remove_dirs = {d for d in dirs if d == '__pycache__'}
-        [(shutil.rmtree(os.path.join(root, d)), dirs.remove(d)) for d in remove_dirs]
+        [(shutil.rmtree(os.path.join(root, d)), dirs.remove(d))
+         for d in remove_dirs]
         for f in files:
             ext = f.rpartition('.')[-1]
             if ext in ('so', 'dylib', 'pyc', 'pyo'):
@@ -802,7 +876,9 @@ def option_parser():  # {{{
         'action',
         nargs='?',
         default='build',
-        choices='build test linux-package kitty.app macos-bundle osx-bundle clean'.split(),
+        choices=
+        'build test linux-package kitty.app macos-bundle osx-bundle clean'.
+        split(),
         help='Action to perform (default is build)'
     )
     p.add_argument(
@@ -812,16 +888,14 @@ def option_parser():  # {{{
         help='Build extension modules with debugging symbols'
     )
     p.add_argument(
-        '-v', '--verbose',
-        default=0,
-        action='count',
-        help='Be verbose'
+        '-v', '--verbose', default=0, action='count', help='Be verbose'
     )
     p.add_argument(
         '--sanitize',
         default=False,
         action='store_true',
-        help='Turn on sanitization to detect memory access errors and undefined behavior. Note that if you do turn it on,'
+        help=
+        'Turn on sanitization to detect memory access errors and undefined behavior. Note that if you do turn it on,'
         ' a special executable will be built for running the test suite. If you want to run normal kitty'
         ' with sanitization, use LD_PRELOAD=libasan.so (for gcc) and'
         ' LD_PRELOAD=/usr/lib/clang/4.0.0/lib/linux/libclang_rt.asan-x86_64.so (for clang, changing path as appropriate).'
@@ -853,24 +927,29 @@ def option_parser():  # {{{
     p.add_argument(
         '--libdir-name',
         default='lib',
-        help='The name of the directory inside --prefix in which to store compiled files. Defaults to "lib"'
+        help=
+        'The name of the directory inside --prefix in which to store compiled files. Defaults to "lib"'
     )
     p.add_argument(
         '--extra-logging',
         action='append',
         default=[],
-        choices=('event-loop',),
-        help='Turn on extra logging for debugging in this build. Can be specified multiple times, to turn'
+        choices=('event-loop', ),
+        help=
+        'Turn on extra logging for debugging in this build. Can be specified multiple times, to turn'
         ' on different types of logging.'
     )
     p.add_argument(
         '--update-check-interval',
         type=float,
         default=24,
-        help='When building a package, the default value for the update_check_interval setting will'
+        help=
+        'When building a package, the default value for the update_check_interval setting will'
         ' be set to this number. Use zero to disable update checking.'
     )
     return p
+
+
 # }}}
 
 
-- 
2.22.0

