From 8be2c48197254837ef04dfa156baa31de37aad73 Mon Sep 17 00:00:00 2001
From: Amit Prakash Ambasta <amit.prakash.ambasta@gmail.com>
Date: Wed, 4 Mar 2020 11:38:49 +0530
Subject: [PATCH] Respect gnuinstalldirs

---
 CMakeLists.txt     | 138 +++++++++++++++++++++++----------------------
 src/CMakeLists.txt |  27 ++++-----
 2 files changed, 84 insertions(+), 81 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ba03695..476de38 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,20 +5,29 @@ project(cppkafka)
 set(CPPKAFKA_VERSION_MAJOR 0)
 set(CPPKAFKA_VERSION_MINOR 3)
 set(CPPKAFKA_VERSION_REVISION 1)
-set(CPPKAFKA_VERSION "${CPPKAFKA_VERSION_MAJOR}.${CPPKAFKA_VERSION_MINOR}.${CPPKAFKA_VERSION_REVISION}")
+set(
+  CPPKAFKA_VERSION
+  "${CPPKAFKA_VERSION_MAJOR}.${CPPKAFKA_VERSION_MINOR}.${CPPKAFKA_VERSION_REVISION}"
+  )
 set(RDKAFKA_MIN_VERSION 0x00090400)
 
+set(CMAKE_INSTALL_LIBDIR "lib")
+
+if(LINUX)
+  include(GNUInstallDirs)
+endif(LINUX)
+
 if(MSVC)
-    # Don't always use Wall, since VC's /Wall is ridiculously verbose.
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
-
-    # Disable VC secure checks, since these are not really issues
-    add_definitions("-D_CRT_SECURE_NO_WARNINGS=1")
-    add_definitions("-D_SCL_SECURE_NO_WARNINGS=1")
-    add_definitions("-DNOGDI=1")
-    add_definitions("-DNOMINMAX=1")
+  # Don't always use Wall, since VC's /Wall is ridiculously verbose.
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3")
+
+  # Disable VC secure checks, since these are not really issues
+  add_definitions("-D_CRT_SECURE_NO_WARNINGS=1")
+  add_definitions("-D_SCL_SECURE_NO_WARNINGS=1")
+  add_definitions("-DNOGDI=1")
+  add_definitions("-DNOMINMAX=1")
 else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")
 endif()
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
 
@@ -36,91 +45,88 @@ option(CPPKAFKA_BOOST_USE_MULTITHREADED "Use Boost multithreaded libraries." ON)
 option(CPPKAFKA_RDKAFKA_STATIC_LIB "Link with Rdkafka static library." OFF)
 
 # Disable output from find_package macro
-if (NOT CPPKAFKA_CMAKE_VERBOSE)
-    set(FIND_PACKAGE_QUIET QUIET)
+if(NOT CPPKAFKA_CMAKE_VERBOSE)
+  set(FIND_PACKAGE_QUIET QUIET)
 endif()
 
 if(CPPKAFKA_BUILD_SHARED)
-    message(STATUS "Build will generate a shared library. "
-            "Use CPPKAFKA_BUILD_SHARED=0 to perform a static build")
-    set(CPPKAFKA_LIBRARY_TYPE SHARED)
+  message(STATUS "Build will generate a shared library. "
+                 "Use CPPKAFKA_BUILD_SHARED=0 to perform a static build")
+  set(CPPKAFKA_LIBRARY_TYPE SHARED)
 else()
-    message(STATUS "Build will generate a static library.")
-    set(CPPKAFKA_LIBRARY_TYPE STATIC)
-    add_definitions("-DCPPKAFKA_STATIC=1")
+  message(STATUS "Build will generate a static library.")
+  set(CPPKAFKA_LIBRARY_TYPE STATIC)
+  add_definitions("-DCPPKAFKA_STATIC=1")
 endif()
 
-if (CPPKAFKA_RDKAFKA_STATIC_LIB)
-    add_definitions("-DLIBRDKAFKA_STATICLIB")
+if(CPPKAFKA_RDKAFKA_STATIC_LIB)
+  add_definitions("-DLIBRDKAFKA_STATICLIB")
 endif()
 
 # Look for Boost (just need boost.optional headers here)
 find_package(Boost REQUIRED ${FIND_PACKAGE_QUIET})
 find_package(RdKafka REQUIRED ${FIND_PACKAGE_QUIET})
 
-if (Boost_FOUND)
-    find_package(Boost COMPONENTS program_options ${FIND_PACKAGE_QUIET})
-    set(Boost_USE_STATIC_LIBS ${CPPKAFKA_BOOST_STATIC_LIBS})
-    set(Boost_USE_MULTITHREADED ${CPPKAFKA_BOOST_USE_MULTITHREADED})
-    include_directories(${Boost_INCLUDE_DIRS})
-    link_directories(${Boost_LIBRARY_DIRS})
-    if (CPPKAFKA_CMAKE_VERBOSE)
-        message(STATUS "Boost include dir: ${Boost_INCLUDE_DIRS}")
-        message(STATUS "Boost library dir: ${Boost_LIBRARY_DIRS}")
-        message(STATUS "Boost use static libs: ${Boost_USE_STATIC_LIBS}")
-        message(STATUS "Boost is multi-threaded: ${CPPKAFKA_BOOST_USE_MULTITHREADED}")
-        message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
-    endif()
+if(Boost_FOUND)
+  find_package(Boost COMPONENTS program_options ${FIND_PACKAGE_QUIET})
+  set(Boost_USE_STATIC_LIBS ${CPPKAFKA_BOOST_STATIC_LIBS})
+  set(Boost_USE_MULTITHREADED ${CPPKAFKA_BOOST_USE_MULTITHREADED})
+  include_directories(${Boost_INCLUDE_DIRS})
+  link_directories(${Boost_LIBRARY_DIRS})
+  if(CPPKAFKA_CMAKE_VERBOSE)
+    message(STATUS "Boost include dir: ${Boost_INCLUDE_DIRS}")
+    message(STATUS "Boost library dir: ${Boost_LIBRARY_DIRS}")
+    message(STATUS "Boost use static libs: ${Boost_USE_STATIC_LIBS}")
+    message(
+      STATUS "Boost is multi-threaded: ${CPPKAFKA_BOOST_USE_MULTITHREADED}")
+    message(STATUS "Boost libraries: ${Boost_LIBRARIES}")
+  endif()
 endif()
 
 add_subdirectory(src)
 add_subdirectory(include)
 
 # Examples target
-if (NOT CPPKAFKA_DISABLE_EXAMPLES AND Boost_PROGRAM_OPTIONS_FOUND)
-    add_subdirectory(examples)
+if(NOT CPPKAFKA_DISABLE_EXAMPLES AND Boost_PROGRAM_OPTIONS_FOUND)
+  add_subdirectory(examples)
 else()
-    message(STATUS "Disabling examples")
+  message(STATUS "Disabling examples")
 endif()
 
 # Add a target to generate API documentation using Doxygen
 find_package(Doxygen ${FIND_PACKAGE_QUIET})
 if(DOXYGEN_FOUND)
-    configure_file(
-        ${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in 
-        ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile 
-        @ONLY
-    )
-    add_custom_target(
-        docs
-        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
-        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-        COMMENT "Generating API documentation with Doxygen" VERBATIM
-    )
+  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/Doxyfile.in
+                 ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
+  add_custom_target(docs ${DOXYGEN_EXECUTABLE}
+                    ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
+                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+                    COMMENT "Generating API documentation with Doxygen"
+                    VERBATIM)
 endif(DOXYGEN_FOUND)
 
 if(NOT CPPKAFKA_DISABLE_TESTS)
-    set(CATCH_ROOT ${CMAKE_SOURCE_DIR}/third_party/Catch2)
-    if(EXISTS ${CATCH_ROOT}/CMakeLists.txt)
-        set(CATCH_INCLUDE ${CATCH_ROOT}/single_include)
-        enable_testing()
-        add_subdirectory(tests)
-    else()
-        message(STATUS "Disabling tests because submodule Catch2 isn't checked out")
-    endif()
+  set(CATCH_ROOT ${CMAKE_SOURCE_DIR}/third_party/Catch2)
+  if(EXISTS ${CATCH_ROOT}/CMakeLists.txt)
+    set(CATCH_INCLUDE ${CATCH_ROOT}/single_include)
+    enable_testing()
+    add_subdirectory(tests)
+  else()
+    message(STATUS "Disabling tests because submodule Catch2 isn't checked out")
+  endif()
 else()
-    message(STATUS "Disabling tests")
+  message(STATUS "Disabling tests")
 endif()
 
 if(NOT TARGET uninstall)
-    # Confiugure the uninstall script
-    configure_file(
-        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
-        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
-        IMMEDIATE @ONLY
-    )
-
-    # Add uninstall target
-    add_custom_target(uninstall
-        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
+  # Confiugure the uninstall script
+  configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
+                 "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
+                 IMMEDIATE
+                 @ONLY)
+
+  # Add uninstall target
+  add_custom_target(uninstall
+                    COMMAND ${CMAKE_COMMAND} -P
+                            ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
 endif()
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 5d31078..e78b583 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -15,35 +15,32 @@ set(SOURCES
     group_information.cpp
     error.cpp
     event.cpp
-
     kafka_handle_base.cpp
     producer.cpp
     consumer.cpp
-
     utils/backoff_performer.cpp
     utils/backoff_committer.cpp
     utils/poll_strategy_base.cpp
-    utils/roundrobin_poll_strategy.cpp
-)
+    utils/roundrobin_poll_strategy.cpp)
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../include/cppkafka)
 include_directories(SYSTEM ${Boost_INCLUDE_DIRS} ${RDKAFKA_INCLUDE_DIR})
 
 add_library(cppkafka ${CPPKAFKA_LIBRARY_TYPE} ${SOURCES})
-set_target_properties(cppkafka PROPERTIES VERSION ${CPPKAFKA_VERSION}
-                                          SOVERSION ${CPPKAFKA_VERSION})
+set_target_properties(cppkafka
+                      PROPERTIES VERSION
+                                 ${CPPKAFKA_VERSION}
+                                 SOVERSION
+                                 ${CPPKAFKA_VERSION})
 
 set(DEPENDENCIES ${RDKAFKA_LIBRARY})
-if (WIN32)
-    # On windows ntohs and related are in ws2_32
-    set(DEPENDENCIES ${DEPENDENCIES} ws2_32.lib)
+if(WIN32)
+  # On windows ntohs and related are in ws2_32
+  set(DEPENDENCIES ${DEPENDENCIES} ws2_32.lib)
 endif()
 target_link_libraries(cppkafka ${DEPENDENCIES})
 target_include_directories(cppkafka PUBLIC ${PROJECT_SOURCE_DIR}/include)
 
-install( 
-    TARGETS cppkafka
-    LIBRARY DESTINATION lib
-    ARCHIVE DESTINATION lib
-    COMPONENT dev
-)
+install(TARGETS cppkafka
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT dev)
-- 
2.25.1

