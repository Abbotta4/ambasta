diff --git a/CMakeLists.txt b/CMakeLists.txt
index 15e5ec9..172f938 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,6 +48,8 @@ set(PACKAGE_TARNAME   "${PACKAGE_NAME}-${PACKAGE_VERSION}")
 set(PACKAGE_BUGREPORT "https://github.com/grpc/grpc/issues/")
 project(${PACKAGE_NAME} C CXX)
 
+include(CheckFunctionExists)
+
 set(gRPC_ZLIB_PROVIDER "module" CACHE STRING "Provider of zlib library")
 set_property(CACHE gRPC_ZLIB_PROVIDER PROPERTY STRINGS "module" "package")
 
@@ -66,6 +68,13 @@ else()
   set(_gRPC_PROTOBUF_LIBRARY_NAME "libprotobuf")
 endif()
 
+CHECK_FUNCTION_EXISTS(pow RESULT)
+if(NOT RESULT)
+  unset(RESULT)
+  set(_libMath "m")
+endif()
+
+
 if("${gRPC_ZLIB_PROVIDER}" STREQUAL "module")
   if(NOT ZLIB_ROOT_DIR)
     set(ZLIB_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zlib)
@@ -109,18 +118,23 @@ if("${gRPC_PROTOBUF_PROVIDER}" STREQUAL "module")
       message(WARNING "gRPC_PROTOBUF_PROVIDER is \"module\" but PROTOBUF_ROOT_DIR is wrong")
   endif()
 elseif("${gRPC_PROTOBUF_PROVIDER}" STREQUAL "package")
-  find_package(protobuf CONFIG)
-  if(protobuf_FOUND)
-    if(TARGET protobuf::${_gRPC_PROTOBUF_LIBRARY_NAME})
-      set(_gRPC_PROTOBUF_LIBRARIES protobuf::${_gRPC_PROTOBUF_LIBRARY_NAME})
-    endif()
-    if(TARGET protobuf::libprotoc)
-      set(_gRPC_PROTOBUF_PROTOC_LIBRARIES protobuf::libprotoc)
-    endif()
-    set(_gRPC_FIND_PROTOBUF "if(NOT protobuf_FOUND)\n  find_package(protobuf CONFIG)\nendif()")
+  find_package(Protobuf)
+  if(Protobuf_FOUND)
+      set(_gRPC_PROTOBUF_LIBRARIES "${Protobuf_LIBRARIES}")
+      set(_gRPC_PROTOBUF_PROTOC_LIBRARIES "${Protobuf_PROTOC_LIBRARIES}")
   else()
-    find_package(Protobuf MODULE)
-    set(_gRPC_FIND_PROTOBUF "if(NOT Protobuf_FOUND)\n  find_package(Protobuf)\nendif()")
+        find_package(protobuf CONFIG)
+        if(protobuf_FOUND)
+            if(TARGET protobuf::${_gRPC_PROTOBUF_LIBRARY_NAME})
+                set(_gRPC_PROTOBUF_LIBRARIES protobuf::${_gRPC_PROTOBUF_LIBRARY_NAME})
+            endif()
+            if(TARGET protobuf::libprotoc)
+                set(_gRPC_PROTOBUF_PROTOC_LIBRARIES protobuf::libprotoc)
+            endif()
+            set(_gRPC_FIND_PROTOBUF "if(NOT protobuf_FOUND)\n  find_package(protobuf CONFIG)\nendif()")
+        else()
+            set(_gRPC_FIND_PROTOBUF "if(NOT Protobuf_FOUND)\n  find_package(Protobuf)\nendif()")
+        endif()
   endif()
 endif()
 
@@ -216,6 +230,9 @@ target_include_directories(gpr
   PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/third_party/zlib
 )
 
+target_link_libraries(gpr
+  ${_libMath}
+)
 
 foreach(_hdr
   include/grpc/support/alloc.h
@@ -712,6 +729,7 @@ target_link_libraries(grpc_cronet
   ${_gRPC_BASELIB_LIBRARIES}
   ${_gRPC_SSL_LIBRARIES}
   gpr
+  ${_libMath}
 )
 
 foreach(_hdr
@@ -937,6 +955,7 @@ target_include_directories(grpc_unsecure
 target_link_libraries(grpc_unsecure
   ${_gRPC_BASELIB_LIBRARIES}
   gpr
+  ${_libMath}
 )
 
 foreach(_hdr
@@ -1292,6 +1311,7 @@ target_link_libraries(grpc++_unsecure
   gpr
   grpc_unsecure
   grpc
+  ${_libMath}
 )
 
 foreach(_hdr
@@ -1465,6 +1485,7 @@ target_include_directories(grpc_csharp_ext
 target_link_libraries(grpc_csharp_ext
   grpc
   gpr
+  ${_libMath}
 )
 
 
@@ -1493,6 +1514,7 @@ target_include_directories(gen_hpack_tables
 target_link_libraries(gen_hpack_tables
   gpr
   grpc
+  ${_gRPC_PROTOBUF_LIBRARIES}
 )
 
 
@@ -1542,6 +1564,7 @@ target_link_libraries(grpc_create_jwt
   ${_gRPC_SSL_LIBRARIES}
   grpc
   gpr
+  ${_gRPC_PROTOBUF_LIBRARIES}
 )
 
 
@@ -1568,6 +1591,7 @@ target_include_directories(grpc_print_google_default_creds_token
 target_link_libraries(grpc_print_google_default_creds_token
   grpc
   gpr
+  ${_gRPC_PROTOBUF_LIBRARIES}
 )
 
 
@@ -1594,6 +1618,7 @@ target_include_directories(grpc_verify_jwt
 target_link_libraries(grpc_verify_jwt
   grpc
   gpr
+  ${_gRPC_PROTOBUF_LIBRARIES}
 )
 
 
@@ -1618,6 +1643,7 @@ target_include_directories(grpc_cpp_plugin
 )
 
 target_link_libraries(grpc_cpp_plugin
+  ${_gRPC_PROTOBUF_LIBRARIES}
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
   grpc_plugin_support
 )
@@ -1644,6 +1670,7 @@ target_include_directories(grpc_csharp_plugin
 )
 
 target_link_libraries(grpc_csharp_plugin
+  ${_gRPC_PROTOBUF_LIBRARIES}
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
   grpc_plugin_support
 )
@@ -1670,6 +1697,7 @@ target_include_directories(grpc_node_plugin
 )
 
 target_link_libraries(grpc_node_plugin
+  ${_gRPC_PROTOBUF_LIBRARIES}
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
   grpc_plugin_support
 )
@@ -1697,6 +1725,7 @@ target_include_directories(grpc_objective_c_plugin
 
 target_link_libraries(grpc_objective_c_plugin
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
+  ${_gRPC_PROTOBUF_LIBRARIES}
   grpc_plugin_support
 )
 
@@ -1724,6 +1753,7 @@ target_include_directories(grpc_python_plugin
 target_link_libraries(grpc_python_plugin
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
   grpc_plugin_support
+  ${_gRPC_PROTOBUF_LIBRARIES}
 )
 
 
@@ -1748,6 +1778,7 @@ target_include_directories(grpc_ruby_plugin
 )
 
 target_link_libraries(grpc_ruby_plugin
+  ${_gRPC_PROTOBUF_LIBRARIES}
   ${_gRPC_PROTOBUF_PROTOC_LIBRARIES}
   grpc_plugin_support
 )
@@ -1778,3 +1809,54 @@ foreach(_config gRPCConfig gRPCConfigVersion)
     DESTINATION ${CMAKE_INSTALL_CMAKEDIR}
   )
 endforeach()
+
+set(_PKG_CONFIG_VERSION "${PACKAGE_VERSION}")
+set(_PKG_CONFIG_REQUIRES_GRPC "zlib")
+set(_PKG_CONFIG_REQUIRES_SECURE "openssl")
+set(_PKG_CONFIG_REQUIRES_GRPCXX "protobuf")
+execute_process(COMMAND pkg-config --libs-only-l openssl OUTPUT_VARIABLE _PKG_CONFIG_LIBS_SECURE)
+execute_process(COMMAND pkg-config --libs-only-l zlib OUTPUT_VARIABLE _PKG_CONFIG_LIBS_GRPC)
+execute_process(COMMAND pkg-config --libs-only-l protobuf OUTPUT_VARIABLE _PKG_CONFIG_LIBS_GRPCXX)
+string(STRIP ${_PKG_CONFIG_LIBS_SECURE} _PKG_CONFIG_LIBS_SECURE)
+string(STRIP ${_PKG_CONFIG_LIBS_GRPC} _PKG_CONFIG_LIBS_GRPC)
+string(STRIP ${_PKG_CONFIG_LIBS_GRPCXX} _PKG_CONFIG_LIBS_GRPCXX)
+
+# grpc .pc file
+set(_PKG_CONFIG_PROJECT_NAME "gRPC")
+set(_PKG_CONFIG_DESCRIPTION "High performance general RPC framework")
+unset(_PKG_CONFIG_CFLAGS)
+set(_PKG_CONFIG_REQUIRES_PRIVATE "${_PKG_CONFIG_REQUIRES_GRPC} ${_PKG_CONFIG_REQUIRES_SECURE}")
+set(_PKG_CONFIG_LIBS "-lgrpc")
+set(_PKG_CONFIG_LIBS_PRIVATE "${_PKG_CONFIG_LIBS_GRPC} ${_PKG_CONFIG_LIBS_SECURE}")
+CONFIGURE_FILE(tools/cmake/pkg-config.pc.in ${_PKG_CONFIG_PROJECT_NAME}.pc @ONLY)
+INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_PROJECT_NAME}.pc" DESTINATION lib/pkgconfig)
+
+# grpc_unsecure .pc file
+set(_PKG_CONFIG_PROJECT_NAME "gRPC_unsecure")
+set(_PKG_CONFIG_DESCRIPTION "High performance general RPC framework without SSL")
+unset(_PKG_CONFIG_CFLAGS)
+set(_PKG_CONFIG_REQUIRES_PRIVATE "${_PKG_CONFIG_REQUIRES_GRPC}")
+set(_PKG_CONFIG_LIBS "-lgrpc")
+set(_PKG_CONFIG_LIBS_PRIVATE "${_PKG_CONFIG_LIBS_GRPC}")
+CONFIGURE_FILE(tools/cmake/pkg-config.pc.in ${_PKG_CONFIG_PROJECT_NAME}.pc @ONLY)
+INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_PROJECT_NAME}.pc" DESTINATION lib/pkgconfig)
+
+# grpc++ .pc file
+set(_PKG_CONFIG_PROJECT_NAME "gRPC++")
+set(_PKG_CONFIG_DESCRIPTION "C++ wrapper for gRPC")
+unset(_PKG_CONFIG_CFLAGS)
+set(_PKG_CONFIG_REQUIRES_PRIVATE "${_PKG_CONFIG_REQUIRES_GRPCXX}")
+set(_PKG_CONFIG_LIBS "-lgrpc++")
+set(_PKG_CONFIG_LIBS_PRIVATE "${_PKG_CONFIG_LIBS_GRPCXX}")
+CONFIGURE_FILE(tools/cmake/pkg-config.pc.in ${_PKG_CONFIG_PROJECT_NAME}.pc @ONLY)
+INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_PROJECT_NAME}.pc" DESTINATION lib/pkgconfig)
+
+# grpc++_unsecure .pc file
+set(_PKG_CONFIG_PROJECT_NAME "gRPC++_unsecure")
+set(_PKG_CONFIG_DESCRIPTION "C++ wrapper for gRPC without SSL")
+unset(_PKG_CONFIG_CFLAGS)
+set(_PKG_CONFIG_REQUIRES_PRIVATE "gRPC_unsecure ${_PKG_CONFIG_REQUIRES_GRPCXX}")
+set(_PKG_CONFIG_LIBS "-lgrpc++")
+set(_PKG_CONFIG_LIBS_PRIVATE "${_PKG_CONFIG_LIBS_GRPCXX}")
+CONFIGURE_FILE(tools/cmake/pkg-config.pc.in ${_PKG_CONFIG_PROJECT_NAME}.pc @ONLY)
+INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/${_PKG_CONFIG_PROJECT_NAME}.pc" DESTINATION lib/pkgconfig)
diff --git a/tools/cmake/pkg-config.pc.in b/tools/cmake/pkg-config.pc.in
new file mode 100644
index 0000000..c7a404a
--- /dev/null
+++ b/tools/cmake/pkg-config.pc.in
@@ -0,0 +1,12 @@
+prefix=@_PKG_CONFIG_PREFIX@
+exec_prefix=${prefix}
+includedir=${prefix}/include
+libdir=${exec_prefix}/lib
+
+Name: @_PKG_CONFIG_PROJECT_NAME@
+Description: @_PKG_CONFIG_DESCRIPTION@
+Version: @_PKG_CONFIG_VERSION@
+Cflags: -I${includedir} @_PKG_CONFIG_CFLAGS@
+Requires.private: @_PKG_CONFIG_REQUIRES_PRIVATE@
+Libs: -L${libdir} @_PKG_CONFIG_LIBS@
+Libs.private: @_PKG_CONFIG_LIBS_PRIVATE@
